# DaVinci Connection Definitions

Below is a list of all available DaVinci Connections available for use in `davinci_connection` resource. 
If the `value` type of a property is not defined it must be inferred.


## (Demo) PingOne Authorize HTTP request and response

Connector ID (`connector_id` in the resource): `pingauthadapter`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/pingauthadapter.tf") }}


## 1Kosmos connector

Connector ID (`connector_id` in the resource): `connector1Kosmos`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connector1Kosmos.tf") }}


## AWS Lambda

Connector ID (`connector_id` in the resource): `connectorAWSLambda`

Properties (used in the `property` block in the resource as the `name` parameter):

* `accessKeyId` (string): Access key to connect to AWS Environment. Console display name: "Access Key Id".
* `region` (string): AWS Region where the Lambda function is created. Console display name: "AWS Region".
* `secretAccessKey` (string): Secret Key to access the AWS. Console display name: "AWS Secret Key".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorAWSLambda.tf") }}


## AWS Login

Connector ID (`connector_id` in the resource): `awsIdpConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `openId` (json):  Console display name: "OpenId Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/awsIdpConnector.tf") }}


## AWS Secrets Manager

Connector ID (`connector_id` in the resource): `connectorAmazonAwsSecretsManager`

Properties (used in the `property` block in the resource as the `name` parameter):

* `accessKeyId` (string): The AWS Access Key. Console display name: "AWS Access Key".
* `region` (string): The AWS Region. Console display name: "AWS Region".
* `secretAccessKey` (string): The AWS Access Secret. Console display name: "AWS Access Secret".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorAmazonAwsSecretsManager.tf") }}


## AbuseIPDB

Connector ID (`connector_id` in the resource): `connectorAbuseipdb`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): API Key gathered from AbuseIPDB tenant. Console display name: "API Key".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorAbuseipdb.tf") }}


## Acuant

Connector ID (`connector_id` in the resource): `connectorAcuant`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorAcuant.tf") }}


## Adobe Marketo

Connector ID (`connector_id` in the resource): `adobemarketoConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientId` (string): Your Adobe Marketo client ID. Console display name: "Client ID".
* `clientSecret` (string): Your Adobe Marketo client secret. Console display name: "Client Secret".
* `endpoint` (string): The API endpoint for your Adobe Marketo instance, such as "abc123.mktorest.com/rest". Console display name: "API URL".


Example:
{{ tffile (printf "%s" "examples/connectors/adobemarketoConnector.tf") }}


## Allthenticate

Connector ID (`connector_id` in the resource): `connectorAllthenticate`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorAllthenticate.tf") }}


## Amazon DynamoDB

Connector ID (`connector_id` in the resource): `connectorAmazonDynamoDB`

Properties (used in the `property` block in the resource as the `name` parameter):

* `awsAccessKey` (string): Your AWS Access Key. Console display name: "AWS Access Key".
* `awsAccessSecret` (string): Access Secret corresponding with Access Key found in Your Security Credentials. Console display name: "AWS Access Secret".
* `awsRegion` (string): The AWS Region you are using the connector for. Console display name: "AWS Region".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorAmazonDynamoDB.tf") }}


## Amazon Simple Email Service

Connector ID (`connector_id` in the resource): `amazonSimpleEmailConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `awsAccessKey` (string):  Console display name: "AWS Access Key".
* `awsAccessSecret` (string):  Console display name: "AWS Access Secret".
* `awsRegion` (string):  Console display name: "AWS Region".
* `from` (string): The email address that the message appears to originate from, as registered with your AWS account, such as "support@mycompany.com". Console display name: "From (Default) *".


Example:
{{ tffile (printf "%s" "examples/connectors/amazonSimpleEmailConnector.tf") }}


## Annotation

Connector ID (`connector_id` in the resource): `annotationConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/annotationConnector.tf") }}


## Apple Login

Connector ID (`connector_id` in the resource): `appleConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/appleConnector.tf") }}


## Argyle

Connector ID (`connector_id` in the resource): `argyleConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiUrl` (string):  Console display name: "API Server URL".
* `clientId` (string):  Console display name: "Client ID".
* `clientSecret` (string):  Console display name: "Client Secret".
* `javascriptWebUrl` (string): Argyle loader javascript web URL. Console display name: "Argyle Loader Javascript Web URL".
* `pluginKey` (string):  Console display name: "Plugin Key".


Example:
{{ tffile (printf "%s" "examples/connectors/argyleConnector.tf") }}


## Asignio

Connector ID (`connector_id` in the resource): `connectorAsignio`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorAsignio.tf") }}


## AuthID

Connector ID (`connector_id` in the resource): `connectorAuthid`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorAuthid.tf") }}


## AuthenticID

Connector ID (`connector_id` in the resource): `authenticIdConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `accountAccessKey` (string): Your Account Access Key provided by AuthenticID . Console display name: "Account Access Key".
* `androidSDKLicenseKey` (string): License key is whitelisted for specific package name. Console display name: "Android SDK Licence Key".
* `apiUrl` (string): AuthenticID REST API URL for sandbox/production environments. Console display name: "REST API URL".
* `baseUrl` (string): AuthenticID API URL for sandbox/production environments. Console display name: "Base URL".
* `clientCertificate` (string): Your Client Certificate provided by AuthenticID. Console display name: "Client Certificate".
* `clientKey` (string): Your Client Key provided by AuthenticID. Console display name: "Client Key".
* `iOSSDKLicenseKey` (string): License key is whitelisted for specific bundle id. Console display name: "iOS SDK Licence Key".
* `passphrase` (string): Your Certificate Passphrase provided by AuthenticID. Console display name: "Certificate Passphrase".
* `secretToken` (string): Your Secret Token provided by AuthenticID. Console display name: "Secret Token".


Example:
{{ tffile (printf "%s" "examples/connectors/authenticIdConnector.tf") }}


## Authomize Incident Connector

Connector ID (`connector_id` in the resource): `connectorAuthomize`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): The API Key from the Authomize API Tokens creation page. Console display name: "Authomize API Key".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorAuthomize.tf") }}


## Azure AD User Management

Connector ID (`connector_id` in the resource): `azureUserManagementConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `baseUrl` (string): The Microsoft API URL to target. For a custom value, select Use Custom API URL and enter a value in the Custom API URL field. Console display name: "API URL".
* `customApiUrl` (string): The URL for the Microsoft Graph API, such as "https://graph.microsoft.com/v1.0". Console display name: "Custom API URL".
* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/azureUserManagementConnector.tf") }}


## Badge

Connector ID (`connector_id` in the resource): `connectorBadge`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorBadge.tf") }}


## BambooHR

Connector ID (`connector_id` in the resource): `bambooConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string):  Console display name: "API Key".
* `baseUrl` (string):  BambooHR Base URL. Console display name: "Base URL".
* `companySubDomain` (string):  Your BambooHR subdomain. Console display name: "Company Sub Domain".
* `flowId` (string): Select ID of the flow to execute when BambooHR sends a webhook. Console display name: "Flow ID".
* `skWebhookUri` (string): Use this url as the Webhook URL in the Third Party Integration's configuration. Console display name: "DaVinci Webhook URL".
* `webhookToken` (string): Create a webhook token and configure it in the bambooHR webhook url. Console display name: "Webhook Token".


Example:
{{ tffile (printf "%s" "examples/connectors/bambooConnector.tf") }}


## Berbix

Connector ID (`connector_id` in the resource): `connectorBerbix`

Properties (used in the `property` block in the resource as the `name` parameter):

* `domainName` (string): Provide Berbix domain name. Console display name: "Domain Name".
* `path` (string): Provide path of the API. Console display name: "Path".
* `username` (string): Provide your Berbix user name. Console display name: "User Name".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorBerbix.tf") }}


## Beyond Identity

Connector ID (`connector_id` in the resource): `connectorBeyondIdentity`

Properties (used in the `property` block in the resource as the `name` parameter):

* `openId` (json):  Console display name: "OpenId Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorBeyondIdentity.tf") }}


## BeyondTrust - Password Safe

Connector ID (`connector_id` in the resource): `connectorBTps`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): API Key from your Password Safe environment. Console display name: "API Key".
* `apiUser` (string): API User from your Password Safe environment. Console display name: "API User".
* `domain` (string): Domain of your Password Safe environment. Console display name: "PasswordSafe Hostname".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorBTps.tf") }}


## BeyondTrust - Privileged Remote Access

Connector ID (`connector_id` in the resource): `connectorBTpra`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientID` (string): PRA API Client ID. Console display name: "Client ID".
* `clientSecret` (string): PRA API Client Secret. Console display name: "Client Secret".
* `praAPIurl` (string): URL of PRA Appliance. Console display name: "PRA Web API Address".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorBTpra.tf") }}


## BeyondTrust - Remote Support

Connector ID (`connector_id` in the resource): `connectorBTrs`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientID` (string): RS API Client ID. Console display name: "Client ID".
* `clientSecret` (string): RS API Client Secret. Console display name: "Client Secret".
* `rsAPIurl` (string): URL of RS Appliance. Console display name: "RS Web API Address".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorBTrs.tf") }}


## BioCatch

Connector ID (`connector_id` in the resource): `biocatchConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiUrl` (string):  Console display name: "API Server URL".
* `customerId` (string):  Console display name: "Customer ID".
* `javascriptCdnUrl` (string):  Console display name: "Javascript CDN URL".
* `sdkToken` (string):  Console display name: "SDK Token".
* `truthApiKey` (string): Fraudulent/Genuine Session Reporting API Key. Console display name: "Truth-mapping API Key".
* `truthApiUrl` (string): Fraudulent/Genuine Session Reporting. Console display name: "Truth-mapping API URL".


Example:
{{ tffile (printf "%s" "examples/connectors/biocatchConnector.tf") }}


## Bitbucket Login

Connector ID (`connector_id` in the resource): `bitbucketIdpConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `oauth2` (json):  Console display name: "Oauth2 Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/bitbucketIdpConnector.tf") }}


## CASTLE

Connector ID (`connector_id` in the resource): `castleConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiSecret` (string): Your 32-character Castle API secret, such as “Olc…QBF”. Console display name: "API Secret".


Example:
{{ tffile (printf "%s" "examples/connectors/castleConnector.tf") }}


## Challenge

Connector ID (`connector_id` in the resource): `challengeConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/challengeConnector.tf") }}


## Circle Access

Connector ID (`connector_id` in the resource): `connectorCircleAccess`

Properties (used in the `property` block in the resource as the `name` parameter):

* `appKey` (string): App Key. Console display name: "App Key".
* `customAuth` (json):  Console display name: "Custom Parameters".
* `loginUrl` (string): The URL of your Circle Access login. Console display name: "Login Url".
* `readKey` (string): Read Key. Console display name: "Read Key".
* `returnToUrl` (string): When using the embedded flow player widget and an IDP/Social Login connector, provide a callback URL to return back to the application. Console display name: "Application Return To URL".
* `writeKey` (string): Write key. Console display name: "Write Key".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorCircleAccess.tf") }}


## Clearbit

Connector ID (`connector_id` in the resource): `connectorClearbit`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): Clearbit API Key. Console display name: "API Key".
* `riskApiVersion` (string): Clearbit - Risk API Version. Console display name: "Risk API Version".
* `version` (string): Clearbit - Person API Version. Console display name: "Person API Version".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorClearbit.tf") }}


## Cloudflare

Connector ID (`connector_id` in the resource): `connectorCloudflare`

Properties (used in the `property` block in the resource as the `name` parameter):

* `accountId` (string): Cloudflare Account ID. Console display name: "Account ID".
* `apiToken` (string): Cloudflare API Token. Console display name: "API Token".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorCloudflare.tf") }}


## Code Snippet

Connector ID (`connector_id` in the resource): `codeSnippetConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `code` (string): Follow example for code. Caution: Custom code is for advanced users only. Before using custom code, review the security risks in the DaVinci documentation by searching for "Using custom code safely". Console display name: "Code Snippet".
* `inputSchema` (string): Follow example for JSON schema. Console display name: "Input Schema".
* `outputSchema` (string): Follow example for JSON schema. Console display name: "Output Schema".


Example:
{{ tffile (printf "%s" "examples/connectors/codeSnippetConnector.tf") }}


## Comply Advantage

Connector ID (`connector_id` in the resource): `complyAdvatangeConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): API Key is the API key that you can retrieve from Comply Advantage Admin Portal. Console display name: "API Key".
* `baseUrl` (string): Comply Advantage API URL for sandbox/production environments. Console display name: "Base URL".


Example:
{{ tffile (printf "%s" "examples/connectors/complyAdvatangeConnector.tf") }}


## ConnectID

Connector ID (`connector_id` in the resource): `connectIdConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectIdConnector.tf") }}


## Cookie

Connector ID (`connector_id` in the resource): `cookieConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `hmacSigningKey` (string): Base64 encoded 256 bit key. Console display name: "HMAC Signing Key".


Example:
{{ tffile (printf "%s" "examples/connectors/cookieConnector.tf") }}


## Credova

Connector ID (`connector_id` in the resource): `credovaConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `baseUrl` (string): Base URL for Credova API. Console display name: "Base URL".
* `password` (string): Password for the Credova Developer Portal. Console display name: "Credova Password".
* `username` (string): Username for the Credova Developer Portal. Console display name: "Credova Username".


Example:
{{ tffile (printf "%s" "examples/connectors/credovaConnector.tf") }}


## CrowdStrike

Connector ID (`connector_id` in the resource): `crowdStrikeConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `baseURL` (string): The base URL of the CrowdStrike environment. Console display name: "CrowdStrike Base URL".
* `clientId` (string): The Client ID of the application in CrowdStrike. Console display name: "Client ID".
* `clientSecret` (string): The Client Secret provided by CrowdStrike. Console display name: "Client Secret".


Example:
{{ tffile (printf "%s" "examples/connectors/crowdStrikeConnector.tf") }}


## Daon IDV

Connector ID (`connector_id` in the resource): `connectorDaonidv`

Properties (used in the `property` block in the resource as the `name` parameter):

* `openId` (json):  Console display name: "OpenId Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorDaonidv.tf") }}


## Daon IdentityX

Connector ID (`connector_id` in the resource): `daonConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiUrl` (string): The protocol, host and base path to the IdX API. E.g. https://api.identityx-cloud.com/tenant1/IdentityXServices/rest/v1. Console display name: "API Base URL".
* `password` (string): The password of the user to authenticate API calls. Console display name: "Admin Password".
* `username` (string): The userId to authenticate API calls. Console display name: "Admin Username".


Example:
{{ tffile (printf "%s" "examples/connectors/daonConnector.tf") }}


## Data Zoo

Connector ID (`connector_id` in the resource): `dataZooConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `password` (string):  Console display name: "Data Zoo Password".
* `username` (string):  Console display name: "Data Zoo Username".


Example:
{{ tffile (printf "%s" "examples/connectors/dataZooConnector.tf") }}


## Datadog API

Connector ID (`connector_id` in the resource): `connector-oai-datadogapi`

Properties (used in the `property` block in the resource as the `name` parameter):

* `authApiKey` (string): The API key for an account that has access to the Datadog API. Console display name: "Authentication API Key".
* `authApplicationKey` (string): The Application key for an account that has access to the Datadog API. Console display name: "Authentication Application Key".
* `basePath` (string): The base URL for contacting the Datadog API, such as "https://api.us3.datadoghq.com". Console display name: "API URL".


Example:
{{ tffile (printf "%s" "examples/connectors/connector-oai-datadogapi.tf") }}


## DeBounce

Connector ID (`connector_id` in the resource): `connectorDeBounce`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): A DeBounce API Key is physically a token/code of 13 random alphanumeric characters. If you need to create an API key, please log in to your DeBounce account and then navigate to the API section. Console display name: "API Key".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorDeBounce.tf") }}


## Device Policy

Connector ID (`connector_id` in the resource): `devicePolicyConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/devicePolicyConnector.tf") }}


## Digidentity

Connector ID (`connector_id` in the resource): `digidentityConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `oauth2` (json):  Console display name: "Oauth2 Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/digidentityConnector.tf") }}


## Duo

Connector ID (`connector_id` in the resource): `duoConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/duoConnector.tf") }}


## Entrust

Connector ID (`connector_id` in the resource): `entrustConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `applicationId` (string): The application ID for the Identity as a Service application. Console display name: "Application ID".
* `serviceDomain` (string): The domain of the Entrust service. Format is '<customer>.<region>.trustedauth.com'. For example, 'mycompany.us.trustedauth.com'. Console display name: "Service Domain".


Example:
{{ tffile (printf "%s" "examples/connectors/entrustConnector.tf") }}


## Error Message

Connector ID (`connector_id` in the resource): `errorConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/errorConnector.tf") }}


## Facebook Login

Connector ID (`connector_id` in the resource): `facebookIdpConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `oauth2` (json):  Console display name: "Oauth2 Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/facebookIdpConnector.tf") }}


## Fingerprint JS

Connector ID (`connector_id` in the resource): `fingerprintjsConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiToken` (string):  Console display name: "Fingerprint Subscription API Token".
* `javascriptCdnUrl` (string):  Console display name: "Javascript CDN URL".
* `token` (string):  Console display name: "Fingerprint Subscription Browser Token".


Example:
{{ tffile (printf "%s" "examples/connectors/fingerprintjsConnector.tf") }}


## Finicity

Connector ID (`connector_id` in the resource): `finicityConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `appKey` (string): Finicity App Key from Finicity Developer Portal. Console display name: "Finicity App Key".
* `baseUrl` (string): Base URL for Finicity API. Console display name: "Base URL".
* `partnerId` (string): The partner id you can obtain from your Finicity developer dashboard. Console display name: "Partner ID".
* `partnerSecret` (string): Partner Secret from Finicity Developer Portal. Console display name: "Partner Secret".


Example:
{{ tffile (printf "%s" "examples/connectors/finicityConnector.tf") }}


## Flow Analytics

Connector ID (`connector_id` in the resource): `analyticsConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/analyticsConnector.tf") }}


## Flow Conductor

Connector ID (`connector_id` in the resource): `flowConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `enforcedSignedToken` (boolean):  Console display name: "Enforce Signed Token".
* `inputSchema` (string): Follow example for JSON schema. Console display name: "Input Schema".
* `pemPublicKey` (string): pem public key. Console display name: "Public Key".


Example:
{{ tffile (printf "%s" "examples/connectors/flowConnector.tf") }}


## Freshdesk

Connector ID (`connector_id` in the resource): `connectorFreshdesk`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): Make sure that the "APIkey:X" is Base64-encoded before pasting into the text field. Console display name: "Freshdesk API Key".
* `baseURL` (string): The <tenant>.freshdesk.com URL or custom domain. Console display name: "Freshdesk Base URL (or Domain)".
* `version` (string): The current Freshdesk API Version. Console display name: "Freshdesk API Version".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorFreshdesk.tf") }}


## Freshservice

Connector ID (`connector_id` in the resource): `connectorFreshservice`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): Your Freshservice API key. Console display name: "API Key".
* `domain` (string): Your Freshservice domain. Example: https://domain.freshservice.com/. Console display name: "Domain".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorFreshservice.tf") }}


## Functions

Connector ID (`connector_id` in the resource): `functionsConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/functionsConnector.tf") }}


## GBG

Connector ID (`connector_id` in the resource): `gbgConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `password` (string):  Console display name: "GBG Password".
* `requestUrl` (string):  Console display name: "Request URL".
* `soapAction` (string): SOAP Action is a header required for the soap request. Console display name: "Soap Action URL".
* `username` (string):  Console display name: "GBG Username".


Example:
{{ tffile (printf "%s" "examples/connectors/gbgConnector.tf") }}


## GitHub Login

Connector ID (`connector_id` in the resource): `githubIdpConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `oauth2` (json):  Console display name: "Oauth2 Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/githubIdpConnector.tf") }}


## Google Analytics (Universal Analytics)

Connector ID (`connector_id` in the resource): `connectorGoogleanalyticsUA`

Properties (used in the `property` block in the resource as the `name` parameter):

* `trackingID` (string): The tracking ID / web property ID. The format is UA-XXXX-Y. All collected data is associated by this ID. Console display name: "Tracking ID".
* `version` (string): The Protocol version. The current value is '1'. This will only change when there are changes made that are not backwards compatible. Console display name: "Version".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorGoogleanalyticsUA.tf") }}


## Google Chrome Enterprise Device Trust

Connector ID (`connector_id` in the resource): `connectorGoogleChromeEnterprise`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorGoogleChromeEnterprise.tf") }}


## Google Login

Connector ID (`connector_id` in the resource): `googleConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `openId` (json):  Console display name: "OpenId Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/googleConnector.tf") }}


## Google Workspace Admin

Connector ID (`connector_id` in the resource): `googleWorkSpaceAdminConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `iss` (string): The email address associated with the Google Workspace service, such as "google-workspace-admin@xenon-set-123456.iam.gserviceaccount.com". Console display name: "Service Account Email Address".
* `privateKey` (string): The private key associated with the public key that you added to the Google Workspace service. Console display name: "Private Key".
* `sub` (string): The administrator's email address. Console display name: "Admin Email Address".


Example:
{{ tffile (printf "%s" "examples/connectors/googleWorkSpaceAdminConnector.tf") }}


## HTTP

Connector ID (`connector_id` in the resource): `httpConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `connectionId` (string):  Console display name: "Select an OpenID token management connection for signed HTTP responses.".
* `recaptchaSecretKey` (string): The Secret Key from reCAPTCHA Admin dashboard. Console display name: "reCAPTCHA v2 Secret Key".
* `recaptchaSiteKey` (string): The Site Key from reCAPTCHA Admin dashboard. Console display name: "reCAPTCHA v2 Site Key".
* `whiteList` (string): Enter the URLs of trusted sites that host your HTML content. Console display name: "Trusted Sites".


Example:
{{ tffile (printf "%s" "examples/connectors/httpConnector.tf") }}


## HUMAN

Connector ID (`connector_id` in the resource): `connectorHuman`

Properties (used in the `property` block in the resource as the `name` parameter):

* `humanAuthenticationToken` (string): Bearer Token from HUMAN. Console display name: "HUMAN Authentication Token".
* `humanCustomerID` (string): Customer ID from HUMAN. Console display name: "HUMAN Customer ID".
* `humanPolicyName` (string): HUMAN mitigation policy name. Console display name: "HUMAN Policy Name".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorHuman.tf") }}


## HUMAN

Connector ID (`connector_id` in the resource): `humanCompromisedConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `appId` (string): App ID from your HUMAN Tenant. Console display name: "HUMAN App ID".
* `authToken` (string): Auth Token from your HUMAN Tenant. Console display name: "HUMAN Auth Token".


Example:
{{ tffile (printf "%s" "examples/connectors/humanCompromisedConnector.tf") }}


## HYPR Adapt

Connector ID (`connector_id` in the resource): `connectorHyprAdapt`

Properties (used in the `property` block in the resource as the `name` parameter):

* `accessToken` (string): Access Token. Console display name: "HYPR Adapt Access Token".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorHyprAdapt.tf") }}


## HYPR

Connector ID (`connector_id` in the resource): `hyprConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/hyprConnector.tf") }}


## Have I Been Pwned

Connector ID (`connector_id` in the resource): `haveIBeenPwnedConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string):  Console display name: "Have I Been Pwned API Key".
* `apiUrl` (string):  Console display name: "API Server URL".
* `userAgent` (string):  


Example:
{{ tffile (printf "%s" "examples/connectors/haveIBeenPwnedConnector.tf") }}


## Hellō Connector

Connector ID (`connector_id` in the resource): `connectorHello`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorHello.tf") }}


## Hubspot

Connector ID (`connector_id` in the resource): `connectorHubspot`

Properties (used in the `property` block in the resource as the `name` parameter):

* `bearerToken` (string): Your unique API key. Console display name: "API Key".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorHubspot.tf") }}


## ID DataWeb

Connector ID (`connector_id` in the resource): `idDatawebConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/idDatawebConnector.tf") }}


## ID R&D

Connector ID (`connector_id` in the resource): `idranddConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string):  Console display name: "API Key".
* `apiUrl` (string):  Console display name: "API Server URL".


Example:
{{ tffile (printf "%s" "examples/connectors/idranddConnector.tf") }}


## ID.me - Identity Verification

Connector ID (`connector_id` in the resource): `connectorIdMeIdentity`

Properties (used in the `property` block in the resource as the `name` parameter):

* `openId` (json):  Console display name: "OpenId Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorIdMeIdentity.tf") }}


## ID.me

Connector ID (`connector_id` in the resource): `idMeConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `oauth2` (json):  Console display name: "Oauth2 Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/idMeConnector.tf") }}


## IDI Data

Connector ID (`connector_id` in the resource): `skPeopleIntelligenceConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `authUrl` (string):  Console display name: "Authorization URL".
* `clientId` (string):  Console display name: "Client ID".
* `clientSecret` (string):  Console display name: "Client Secret".
* `dppa` (string):  Console display name: "DPPA".
* `glba` (string):  Console display name: "GLBA".
* `searchUrl` (string):  Console display name: "Search URL".


Example:
{{ tffile (printf "%s" "examples/connectors/skPeopleIntelligenceConnector.tf") }}


## IDmelon

Connector ID (`connector_id` in the resource): `connectorIdmelon`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorIdmelon.tf") }}


## IDmission

Connector ID (`connector_id` in the resource): `idmissionConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `authDescription` (string):  Console display name: "Authentication Description".
* `connectorName` (string):  Console display name: "Connector Name".
* `description` (string):  Console display name: "Description".
* `details1` (string):  Console display name: "Credentials Details 1".
* `details2` (string):  Console display name: "Credentials Details 2".
* `iconUrl` (string):  Console display name: "Icon URL".
* `iconUrlPng` (string):  Console display name: "Icon URL in PNG".
* `loginId` (string):  Console display name: "Sign On ID".
* `merchantId` (string):  Console display name: "Merchant ID".
* `password` (string):  Console display name: "Password".
* `productId` (string):  Console display name: "Product ID".
* `productName` (string):  Console display name: "Product Name".
* `showCredAddedOn` (boolean):  Console display name: "Show Credentials Added On?".
* `showCredAddedVia` (boolean):  Console display name: "Show Credentials Added through ?".
* `title` (string):  Console display name: "Title".
* `toolTip` (string):  Console display name: "Tooltip".
* `url` (string):  Console display name: "IDmission Server URL".


Example:
{{ tffile (printf "%s" "examples/connectors/idmissionConnector.tf") }}


## IdRamp

Connector ID (`connector_id` in the resource): `idrampOidcConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/idrampOidcConnector.tf") }}


## Image

Connector ID (`connector_id` in the resource): `imageConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/imageConnector.tf") }}


## Incode

Connector ID (`connector_id` in the resource): `incodeConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/incodeConnector.tf") }}


## Infinipoint

Connector ID (`connector_id` in the resource): `connectorInfinipoint`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorInfinipoint.tf") }}


## Jamf

Connector ID (`connector_id` in the resource): `connectorJamf`

Properties (used in the `property` block in the resource as the `name` parameter):

* `jamfPassword` (string): Enter Password for token. Console display name: "JAMF Password".
* `jamfUsername` (string): Enter Username for token. Console display name: "JAMF Username".
* `serverName` (string): Enter Server Name for Base URL. Console display name: "Server Name".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorJamf.tf") }}


## Jira Service Desk

Connector ID (`connector_id` in the resource): `connectorJiraServiceDesk`

Properties (used in the `property` block in the resource as the `name` parameter):

* `JIRAServiceDeskAuth` (string): Bearer Authorization Token for JIRA Service Desk. Console display name: "Bearer Authorization Token for JIRA Service Desk".
* `JIRAServiceDeskCreateData` (string): Raw JSON body to create new JIRA service desk request. Example: {   "requestParticipants": ["qm:a713c8ea-1075-4e30-9d96-891a7d181739:5ad6d69abfa3980ce712caae"   ],   "serviceDeskId": "10",   "requestTypeId": "25",   "requestFieldValues": {     "summary": "Request JSD help via REST",     "description": "I need a new *mouse* for my Mac"   } }. Console display name: "Raw JSON for creating new JIRA service desk request".
* `JIRAServiceDeskURL` (string): URL for JIRA Service Desk. Example: your-domain.atlassian.net. Console display name: "JIRA Service Desk URL".
* `JIRAServiceDeskUpdateData` (string): Raw JSON body to update JIRA service desk request. Example: {"id": "1","additionalComment": {"body": "I have fixed the problem."}}. Console display name: "Raw JSON for updating JIRA service desk".
* `method` (string): The HTTP Method. Console display name: "Method".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorJiraServiceDesk.tf") }}


## Jira

Connector ID (`connector_id` in the resource): `jiraConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): You may need to create a token from Jira with your credentials, if you haven't created one. Console display name: "Jira API token".
* `apiUrl` (string): Base URL of the Jira instance. Console display name: "Base Url".
* `email` (string): Email used for your Jira account. Console display name: "Email Address".


Example:
{{ tffile (printf "%s" "examples/connectors/jiraConnector.tf") }}


## Jumio

Connector ID (`connector_id` in the resource): `jumioConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string):  Console display name: "API Key".
* `authDescription` (string):  Console display name: "Authentication Description".
* `authUrl` (string):  Console display name: "Base URL for Authentication".
* `authorizationTokenLifetime` (number): default: 1800 (30 minutes). maximum: 5184000 (60 days). Console display name: "Time Transaction URL Valid (seconds)".
* `baseColor` (string): Must be passed with bgColor. Console display name: "HEX Main Color".
* `bgColor` (string): Must be passed with baseColor. Console display name: "HEX Background Color.".
* `callbackUrl` (string):  Console display name: "Callback URL".
* `clientSecret` (string):  Console display name: "API Secret".
* `connectorName` (string):  Console display name: "Connector Name".
* `description` (string):  Console display name: "Description".
* `details1` (string):  Console display name: "Credentials Details 1".
* `details2` (string):  Console display name: "Credentials Details 2".
* `doNotShowInIframe` (boolean): If this is true, user will be redirected to the verification url and then redirected back when complete. Console display name: "Do not show in iFrame".
* `docVerificationUrl` (string):  Console display name: "Document Verification Url".
* `headerImageUrl` (string): Logo must be: landscape (16:9 or 4:3), min. height of 192 pixels, size 8-64 KB. Console display name: "Custom Header Logo URL".
* `iconUrl` (string):  Console display name: "Icon URL".
* `iconUrlPng` (string):  Console display name: "Icon URL in PNG".
* `locale` (string): Renders content in the specified language. Console display name: "Locale".
* `showCredAddedOn` (boolean):  Console display name: "Show Credentials Added On?".
* `showCredAddedVia` (boolean):  Console display name: "Show Credentials Added through ?".
* `title` (string):  Console display name: "Title".
* `toolTip` (string):  Console display name: "Tooltip".


Example:
{{ tffile (printf "%s" "examples/connectors/jumioConnector.tf") }}


## KBA

Connector ID (`connector_id` in the resource): `kbaConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `authDescription` (string):  Console display name: "Authentication Description".
* `connectorName` (string):  Console display name: "Connector Name".
* `description` (string):  Console display name: "Description".
* `details1` (string):  Console display name: "Credentials Details 1".
* `details2` (string):  Console display name: "Credentials Details 2".
* `formFieldsList` (json):  Console display name: "Fields List".
* `iconUrl` (string):  Console display name: "Icon URL".
* `iconUrlPng` (string):  Console display name: "Icon URL in PNG".
* `showCredAddedOn` (boolean):  Console display name: "Show Credentials Added On?".
* `showCredAddedVia` (boolean):  Console display name: "Show Credentials Added through ?".
* `title` (string):  Console display name: "Title".
* `toolTip` (string):  Console display name: "Tooltip".


Example:
{{ tffile (printf "%s" "examples/connectors/kbaConnector.tf") }}


## Kaizen Secure Voiz

Connector ID (`connector_id` in the resource): `kaizenVoizConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiUrl` (string): example: http://<server_root>/ksvvoiceservice/rest/service. Console display name: "API Server URL".
* `applicationName` (string):  Console display name: "Application Name".
* `authDescription` (string):  Console display name: "Authentication Description".
* `connectorName` (string):  Console display name: "Connector Name".
* `description` (string):  Console display name: "Description".
* `details1` (string):  Console display name: "Credentials Details 1".
* `details2` (string):  Console display name: "Credentials Details 2".
* `iconUrl` (string):  Console display name: "Icon URL".
* `iconUrlPng` (string):  Console display name: "Icon URL in PNG".
* `showCredAddedOn` (boolean):  Console display name: "Show Credentials Added On?".
* `showCredAddedVia` (boolean):  Console display name: "Show Credentials Added through ?".
* `title` (string):  Console display name: "Title".
* `toolTip` (string):  Console display name: "Tooltip".


Example:
{{ tffile (printf "%s" "examples/connectors/kaizenVoizConnector.tf") }}


## Keyless

Connector ID (`connector_id` in the resource): `connectorKeyless`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorKeyless.tf") }}


## Keyri QR Login

Connector ID (`connector_id` in the resource): `connectorKeyri`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/connectorKeyri.tf") }}


## LDAP

Connector ID (`connector_id` in the resource): `pingOneLDAPConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientId` (string): The Client ID of your PingOne Worker application. Console display name: "Client ID".
* `clientSecret` (string): The Client Secret of your PingOne Worker application. Console display name: "Client Secret".
* `envId` (string): Your PingOne environment ID. Console display name: "Environment ID".
* `gatewayId` (string): Your PingOne LDAP gateway ID. Console display name: "Gateway ID".
* `region` (string): The region in which your PingOne environment exists. Console display name: "Region".


Example:
{{ tffile (printf "%s" "examples/connectors/pingOneLDAPConnector.tf") }}


## LexisNexis

Connector ID (`connector_id` in the resource): `lexisnexisV2Connector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): Your LexisNexis API key, such as “o3x9ywfs26rm1zvl”. Console display name: "API Key".
* `apiUrl` (string): The API URL to target. For a custom value, select Use Custom API URL and enter a value in the Custom API URL field. Console display name: "API URL".
* `orgId` (string): Your LexisNexis organization ID, such as “4en6ll2s”. Console display name: "Organization ID".
* `useCustomApiURL` (string): The API URL to target, such as “https://h.online-metrix.net”. Console display name: "Custom API URL".


Example:
{{ tffile (printf "%s" "examples/connectors/lexisnexisV2Connector.tf") }}


## LinkedIn Login

Connector ID (`connector_id` in the resource): `linkedInConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `oauth2` (json):  Console display name: "Oauth2 Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/linkedInConnector.tf") }}


## Location Policy

Connector ID (`connector_id` in the resource): `locationPolicyConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/locationPolicyConnector.tf") }}


## MFA Container

Connector ID (`connector_id` in the resource): `mfaContainerConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/mfaContainerConnector.tf") }}


## Mailchimp

Connector ID (`connector_id` in the resource): `connectorMailchimp`

Properties (used in the `property` block in the resource as the `name` parameter):

* `transactionalApiKey` (string): The Transactional API Key is used to send data to the transactional API. Console display name: "Transactional API Key".
* `transactionalApiVersion` (string): Mailchimp - Transactional API Version. Console display name: "Transactional API Version".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorMailchimp.tf") }}


## Mailgun

Connector ID (`connector_id` in the resource): `connectorMailgun`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): Mailgun API Key. Console display name: "API Key".
* `apiVersion` (string): Mailgun API Version. Console display name: "API Version".
* `mailgunDomain` (string): Name of the desired domain (e.g. mail.mycompany.com). Console display name: "Domain".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorMailgun.tf") }}


## Microsoft Intune

Connector ID (`connector_id` in the resource): `connectorMicrosoftIntune`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientId` (string): Client ID. Console display name: "Client ID".
* `clientSecret` (string): Client Secret. Console display name: "Client Secret".
* `domainName` (string): Domain Name. Console display name: "Domain Name".
* `grantType` (string): Grant Type. Console display name: "Grant Type".
* `scope` (string): Scope. Console display name: "Scope".
* `tenant` (string): Tenant. Console display name: "Tenant".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorMicrosoftIntune.tf") }}


## Microsoft Login

Connector ID (`connector_id` in the resource): `microsoftIdpConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `openId` (json):  Console display name: "OpenId Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/microsoftIdpConnector.tf") }}


## Microsoft Teams

Connector ID (`connector_id` in the resource): `microsoftTeamsConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/microsoftTeamsConnector.tf") }}


## NuData Security

Connector ID (`connector_id` in the resource): `nudataConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/nudataConnector.tf") }}


## Nuance

Connector ID (`connector_id` in the resource): `nuanceConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `authDescription` (string):  Console display name: "Authentication Description".
* `configSetName` (string): The Config Set Name for accessing Nuance API. Console display name: "Config Set Name".
* `connectorName` (string):  Console display name: "Connector Name".
* `description` (string):  Console display name: "Description".
* `details1` (string):  Console display name: "Credentials Details 1".
* `details2` (string):  Console display name: "Credentials Details 2".
* `iconUrl` (string):  Console display name: "Icon URL".
* `iconUrlPng` (string):  Console display name: "Icon URL in PNG".
* `passphrase1` (string): Passphrase that the user will need to speak for voice sample. Console display name: "Passphrase One".
* `passphrase2` (string): Passphrase that the user will need to speak for voice sample. Console display name: "Passphrase Two".
* `passphrase3` (string): Passphrase that the user will need to speak for voice sample. Console display name: "Passphrase Three".
* `passphrase4` (string): Passphrase that the user will need to speak for voice sample. Console display name: "Passphrase Four".
* `passphrase5` (string): Passphrase that the user will need to speak for voice sample. Console display name: "Passphrase Five".
* `showCredAddedOn` (boolean):  Console display name: "Show Credentials Added On?".
* `showCredAddedVia` (boolean):  Console display name: "Show Credentials Added through ?".
* `title` (string):  Console display name: "Title".
* `toolTip` (string):  Console display name: "Tooltip".


Example:
{{ tffile (printf "%s" "examples/connectors/nuanceConnector.tf") }}


## OIDC & OAuth IdP

Connector ID (`connector_id` in the resource): `genericConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/genericConnector.tf") }}


## OPSWAT MetaAccess

Connector ID (`connector_id` in the resource): `connectorOpswat`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientID` (string): Oauth client key for authenticating API calls with MetaAccess. Console display name: "Oauth Client Key".
* `clientSecret` (string): Oauth client secret for authenticating API calls with MetaAccess. Console display name: "Oauth Client Secret".
* `crossDomainApiPort` (string): MetaAccess Cross-Domain API integration port. Console display name: "Cross-Domain API Port".
* `maDomain` (string): MetaAccess domain for your environment. Console display name: "MetaAccess Domain".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorOpswat.tf") }}


## OneTrust

Connector ID (`connector_id` in the resource): `oneTrustConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientId` (string): Your OneTrust application client ID. Console display name: "Client ID".
* `clientSecret` (string): Your OneTrust application client secret. Console display name: "Client Secret".


Example:
{{ tffile (printf "%s" "examples/connectors/oneTrustConnector.tf") }}


## Onfido

Connector ID (`connector_id` in the resource): `onfidoConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `androidPackageName` (string): Your Android Application's Package Name. Console display name: "Android Application Package Name".
* `apiKey` (string):  Console display name: "API Key".
* `authDescription` (string):  Console display name: "Authentication Description".
* `baseUrl` (string):  Console display name: "Base URL".
* `connectorName` (string):  Console display name: "Connector Name".
* `customizeSteps` (boolean):  Console display name: "Customize Steps".
* `description` (string):  Console display name: "Description".
* `details1` (string):  Console display name: "Credentials Details 1".
* `details2` (string):  Console display name: "Credentials Details 2".
* `iOSBundleId` (string): Your iOS Application's Bundle ID. Console display name: "iOS Application Bundle ID".
* `iconUrl` (string):  Console display name: "Icon URL".
* `iconUrlPng` (string):  Console display name: "Icon URL in PNG".
* `javascriptCSSUrl` (string):  Console display name: "CSS URL".
* `javascriptCdnUrl` (string):  Console display name: "Javascript CDN URL".
* `language` (string):  Console display name: "Language".
* `referenceStepsList` (json):  
* `referrerUrl` (string):  Console display name: "Referrer URL".
* `retrieveReports` (boolean):  Console display name: "Retrieve Reports".
* `shouldCloseOnOverlayClick` (boolean):  Console display name: "Close on Overlay Click".
* `showCredAddedOn` (boolean):  Console display name: "Show Credentials Added On?".
* `showCredAddedVia` (boolean):  Console display name: "Show Credentials Added through ?".
* `stepsList` (boolean): The Proof of Address document capture is currently a BETA feature, and it cannot be used in conjunction with the document and face steps as part of a single SDK flow. Console display name: "ID Verification Steps".
* `title` (string):  Console display name: "Title".
* `toolTip` (string):  Console display name: "Tooltip".
* `useLanguage` (boolean):  Console display name: "Customize Language".
* `useModal` (boolean):  Console display name: "Modal".
* `viewDescriptions` (string):  Console display name: "OnFido Description".
* `viewTitle` (string):  Console display name: "OnFido Title".


Example:
{{ tffile (printf "%s" "examples/connectors/onfidoConnector.tf") }}


## PaloAlto Prisma Connector

Connector ID (`connector_id` in the resource): `connectorPaloAltoPrisma`

Properties (used in the `property` block in the resource as the `name` parameter):

* `baseURL` (string): Prisma Base URL. Console display name: "Prisma Base URL".
* `prismaPassword` (string): Secret Key. Console display name: "Prisma - Secret Key".
* `prismaUsername` (string): Access Key. Console display name: "Prisma - Access Key".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorPaloAltoPrisma.tf") }}


## PingAccess Administration

Connector ID (`connector_id` in the resource): `connector-oai-pingaccessadministrativeapi`

Properties (used in the `property` block in the resource as the `name` parameter):

* `authPassword` (string): The password for an account that has access to the PingAccess administrative API. Console display name: "Authenticating Password".
* `authUsername` (string): The username for an account that has access to the PingAccess administrative API. Console display name: "Authenticating Username".
* `basePath` (string): The base URL for the PingAccess Administrative API, such as "https://localhost:9000/pa-admin-api/v3". Console display name: "API URL".
* `sslVerification` (string): When enabled, DaVinci verifies the PingAccess SSL certificate and uses encrypted communication. Console display name: "Use SSL Verification".


Example:
{{ tffile (printf "%s" "examples/connectors/connector-oai-pingaccessadministrativeapi.tf") }}


## PingFederate Administration

Connector ID (`connector_id` in the resource): `connector-oai-pfadminapi`

Properties (used in the `property` block in the resource as the `name` parameter):

* `authPassword` (string): The password for an account that has access to the PingFederate administrative API. Console display name: "Authenticating Password".
* `authUsername` (string): The username for an account that has access to the PingFederate administrative API. Console display name: "Authenticating Username".
* `basePath` (string): The base URL for the PingFederate administrative API, such as "https://8.8.4.4:9999/pf-admin-api/v1". Console display name: "API URL".
* `sslVerification` (string): When enabled, DaVinci verifies the PingFederate SSL certificate and uses encrypted communication. Console display name: "Use SSL Verification".


Example:
{{ tffile (printf "%s" "examples/connectors/connector-oai-pfadminapi.tf") }}


## PingFederate

Connector ID (`connector_id` in the resource): `pingFederateConnectorV2`

Properties (used in the `property` block in the resource as the `name` parameter):

* `openId` (json):  Console display name: "OpenId Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/pingFederateConnectorV2.tf") }}


## PingID

Connector ID (`connector_id` in the resource): `pingIdConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/pingIdConnector.tf") }}


## PingOne Advanced Identity Cloud Access Request

Connector ID (`connector_id` in the resource): `accessRequestConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `baseURL` (string): The API URL to target. Console display name: "Identity Cloud Base URL".
* `endUserClientId` (string): The Client ID from the end user account. Console display name: "End User Client ID".
* `endUserClientPrivateKey` (string): The Client Private Key from the end user account. Console display name: "End User Client Private Key".
* `realm` (string): The Realm configured in Identity Cloud. Console display name: "Realm".
* `serviceAccountId` (string): The account ID for your Identity Cloud service account. You can find this ID under the account settings of your service account. Console display name: "Service Account ID".
* `serviceAccountPrivateKey` (string): The private key for your Identity Cloud service account. You can find this private key under the account settings of your service account. Console display name: "Service Account Private Key".


Example:
{{ tffile (printf "%s" "examples/connectors/accessRequestConnector.tf") }}


## PingOne Advanced Identity Cloud Login Connector

Connector ID (`connector_id` in the resource): `pingoneAdvancedIdentityCloudLoginConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `openId` (json):  Console display name: "OpenId Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/pingoneAdvancedIdentityCloudLoginConnector.tf") }}


## PingOne Authentication

Connector ID (`connector_id` in the resource): `pingOneAuthenticationConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/pingOneAuthenticationConnector.tf") }}


## PingOne Authorize

Connector ID (`connector_id` in the resource): `pingOneAuthorizeConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientId` (string): The Client ID of the PingOne worker application. Console display name: "Client ID".
* `clientSecret` (string): The Client Secret of the PingOne worker application. Console display name: "Client Secret".
* `endpointURL` (string): The PingOne Authorize decision endpoint or ID to which the connector submits decision requests. Console display name: "Endpoint".


Example:
{{ tffile (printf "%s" "examples/connectors/pingOneAuthorizeConnector.tf") }}


## PingOne Credentials

Connector ID (`connector_id` in the resource): `pingOneCredentialsConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientId` (string): The Client ID of your PingOne Worker application. Console display name: "Client ID".
* `clientSecret` (string): The Client Secret of your PingOne Worker application. Console display name: "Client Secret".
* `digitalWalletApplicationId` (string): Identifier (UUID) associated with the credential digital wallet app. Console display name: "Digital Wallet Application ID".
* `envId` (string): Your PingOne Environment ID. Console display name: "Environment ID".
* `region` (string): The region your PingOne environment is in. Console display name: "Region".


Example:
{{ tffile (printf "%s" "examples/connectors/pingOneCredentialsConnector.tf") }}


## PingOne Forms

Connector ID (`connector_id` in the resource): `pingOneFormsConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/pingOneFormsConnector.tf") }}


## PingOne MFA

Connector ID (`connector_id` in the resource): `pingOneMfaConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientId` (string): The Client ID of your PingOne Worker application. Console display name: "Client ID".
* `clientSecret` (string): The Client Secret of your PingOne Worker application. Console display name: "Client Secret".
* `envId` (string): Your PingOne Environment ID. Console display name: "Environment ID".
* `policyId` (string): The ID of your PingOne MFA device authentication policy. Console display name: "Policy ID".
* `region` (string): The region in which your PingOne environment exists. Console display name: "Region".


Example:
{{ tffile (printf "%s" "examples/connectors/pingOneMfaConnector.tf") }}


## PingOne Notifications

Connector ID (`connector_id` in the resource): `notificationsConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientId` (string): The Client ID of your PingOne Worker application. Console display name: "Client ID".
* `clientSecret` (string): The Client Secret of your PingOne Worker application. Console display name: "Client Secret".
* `envId` (string): Your PingOne Environment ID. Console display name: "Environment ID".
* `notificationPolicyId` (string): A unique identifier for the policy. Console display name: "Notification Policy ID".
* `region` (string): The region in which your PingOne environment exists. Console display name: "Region".


Example:
{{ tffile (printf "%s" "examples/connectors/notificationsConnector.tf") }}


## PingOne Protect

Connector ID (`connector_id` in the resource): `pingOneRiskConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientId` (string): The id for your Application found in Ping's Dashboard. Console display name: "Client ID".
* `clientSecret` (string): Client Secret from your App in Ping's Dashboard. Console display name: "Client Secret".
* `envId` (string): Your Environment ID provided by Ping. Console display name: "Environment ID".
* `region` (string): The region your PingOne environment is in. Console display name: "Region".


Example:
{{ tffile (printf "%s" "examples/connectors/pingOneRiskConnector.tf") }}


## PingOne RADIUS Gateway

Connector ID (`connector_id` in the resource): `pingOneIntegrationsConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/pingOneIntegrationsConnector.tf") }}


## PingOne Scope Consent

Connector ID (`connector_id` in the resource): `pingOneScopeConsentConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientId` (string): The Client ID of your PingOne Worker application. Console display name: "Client ID".
* `clientSecret` (string): The Client Secret of your PingOne Worker application. Console display name: "Client Secret".
* `envId` (string): Your PingOne Environment ID. Console display name: "Environment ID".
* `region` (string): The region in which your PingOne environment exists. Console display name: "Region".


Example:
{{ tffile (printf "%s" "examples/connectors/pingOneScopeConsentConnector.tf") }}


## PingOne Verify

Connector ID (`connector_id` in the resource): `pingOneVerifyConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientId` (string): The Client ID of your PingOne Worker application. Console display name: "Client ID".
* `clientSecret` (string): The Client Secret of your PingOne Worker application. Console display name: "Client Secret".
* `envId` (string): Your PingOne Environment ID. Console display name: "Environment ID".
* `region` (string): The region your PingOne environment is in. Console display name: "Region".


Example:
{{ tffile (printf "%s" "examples/connectors/pingOneVerifyConnector.tf") }}


## PingOne

Connector ID (`connector_id` in the resource): `pingOneSSOConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientId` (string): The Client ID of your PingOne Worker application. Console display name: "Client ID".
* `clientSecret` (string): The Client Secret of your PingOne Worker application. Console display name: "Client Secret".
* `envId` (string): Your PingOne environment ID. Console display name: "Environment ID".
* `region` (string): The region in which your PingOne environment exists. Console display name: "Region".


Example:
{{ tffile (printf "%s" "examples/connectors/pingOneSSOConnector.tf") }}


## Prove International

Connector ID (`connector_id` in the resource): `proveConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `baseUrl` (string):  Console display name: "Prove Base URL".
* `clientId` (string):  Console display name: "Prove Client ID".
* `grantType` (string):  Console display name: "Prove Grant Type".
* `password` (string):  Console display name: "Prove Password".
* `username` (string):  Console display name: "Prove Username".


Example:
{{ tffile (printf "%s" "examples/connectors/proveConnector.tf") }}


## Prove

Connector ID (`connector_id` in the resource): `payfoneConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `appClientId` (string):  Console display name: "App Client ID".
* `baseUrl` (string):  Console display name: "Prove Base URL".
* `clientId` (string):  Console display name: "Client ID".
* `password` (string):  Console display name: "Password".
* `simulatorMode` (boolean):  Console display name: "Simulator Mode?".
* `simulatorPhoneNumber` (string):  Console display name: "Simulator Phone Number".
* `skCallbackBaseUrl` (string): Use this url as the callback base URL. Console display name: "Callback Base URL".
* `username` (string):  Console display name: "Username".


Example:
{{ tffile (printf "%s" "examples/connectors/payfoneConnector.tf") }}


## RSA

Connector ID (`connector_id` in the resource): `rsaConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `accessId` (string): RSA Access ID from Administration API key file. Console display name: "Access ID".
* `accessKey` (string): RSA Access Key from Administration API key file. Console display name: "Access Key".
* `baseUrl` (string): Base URL for RSA API that is provided in Administration API key file. Console display name: "Base URL".


Example:
{{ tffile (printf "%s" "examples/connectors/rsaConnector.tf") }}


## ReadID by Inverid

Connector ID (`connector_id` in the resource): `inveridConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `getApiKey` (string): Viewer API Key provided to you by Inverid. Console display name: "ReadID Viewer API Key".
* `host` (string): Hostname provided to you by Inverid. Console display name: "ReadID Hostname".
* `postApiKey` (string): Submitter API Key provided to you by Inverid. Console display name: "ReadID Submitter API Key".
* `skWebhookUri` (string): Use this url as the Webhook URL in the Third Party Integration's configuration. Console display name: "Redirect Webhook URI".
* `timeToLive` (string): Specify the duration (in minutes) a users session should stay active. Value must be between 30 and 72000. Console display name: "Time to live for ReadySession".


Example:
{{ tffile (printf "%s" "examples/connectors/inveridConnector.tf") }}


## Red Violet

Connector ID (`connector_id` in the resource): `connectorIdiVERIFIED`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiSecret` (string): Please enter your API secret that Red Violet has provided you. Console display name: "API Secret".
* `companyKey` (string): Please enter the company key that Red Violet has assigned. Console display name: "Company Key".
* `idiEnv` (string): Please choose which coreIDENTITY environment you would like to query . Console display name: "Environment".
* `siteKey` (string): Please enter your site key that Red Violet has provided you. Console display name: "Site Key".
* `uniqueUrl` (string): Please enter your unique URL that Red Violet has provided you. Console display name: "Unique URL".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorIdiVERIFIED.tf") }}


## SAML IdP

Connector ID (`connector_id` in the resource): `samlIdpConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `saml` (json):  Console display name: "SAML Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/samlIdpConnector.tf") }}


## SAML

Connector ID (`connector_id` in the resource): `samlConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/samlConnector.tf") }}


## SEON

Connector ID (`connector_id` in the resource): `seonConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `baseURL` (string): The API URL to target. Console display name: "API Base URL".
* `licenseKey` (string): Your SEON license key. For help, see the SEON REST API documentation. Console display name: "License Key".


Example:
{{ tffile (printf "%s" "examples/connectors/seonConnector.tf") }}


## SMTP Client

Connector ID (`connector_id` in the resource): `smtpConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `hostname` (string): Example: smtp-relay.gmail.com. Console display name: "SMTP Server/Host".
* `name` (string): Optional hostname of the client, used for identifying to the server, defaults to hostname of the machine. Console display name: "Client Name".
* `password` (string):  Console display name: "Password".
* `port` (number): Example: 25. Console display name: "SMTP Port".
* `secureFlag` (boolean):  Console display name: "Secure Flag?".
* `username` (string):  Console display name: "Username".


Example:
{{ tffile (printf "%s" "examples/connectors/smtpConnector.tf") }}


## SailPoint IdentityNow

Connector ID (`connector_id` in the resource): `connectorIdentityNow`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientId` (string): Client Id for your client found in IdentityNow's Dashboard. Console display name: "Client ID".
* `clientSecret` (string): Client Secret from your client in IdentityNow's Dashboard. Console display name: "Client Secret".
* `tenant` (string): The org name is displayed within the Org Details section of the dashboard. Console display name: "IdentityNow Tenant".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorIdentityNow.tf") }}


## Salesforce Marketing Cloud (BETA)

Connector ID (`connector_id` in the resource): `connectorSalesforceMarketingCloud`

Properties (used in the `property` block in the resource as the `name` parameter):

* `SalesforceMarketingCloudURL` (string): URL for Salesforce Marketing Cloud. Example: https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com. Console display name: "Salesforce Marketing Cloud URL".
* `accountId` (string): Account identifier, or MID, of the target business unit. Use to switch between business units. If you don’t specify account_id, the returned access token is in the context of the business unit that created the integration. Console display name: "Account ID".
* `clientId` (string): Client ID issued when you create the API integration in Installed Packages. Console display name: "Client ID".
* `clientSecret` (string): Client secret issued when you create the API integration in Installed Packages. Console display name: "Client Secret".
* `scope` (string): Space-separated list of data-access permissions for your application. Console display name: "Scope".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorSalesforceMarketingCloud.tf") }}


## Salesforce

Connector ID (`connector_id` in the resource): `salesforceConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `adminUsername` (string): The username of your Salesforce administrator account. Console display name: "Username".
* `consumerKey` (string): The consumer key shown on your Salesforce connected app. Console display name: "Consumer Key".
* `domainName` (string): Your Salesforce domain name, such as "mycompany-dev-ed". Console display name: "Domain Name".
* `environment` (string): If the environment you specify in the Domain Name field is part of a sandbox organization, select Sandbox. Otherwise, select Production. Console display name: "Environment".
* `privateKey` (string): The private key that corresponds to the X.509 certificate you added to your Salesforce connected app. Console display name: "Private Key".


Example:
{{ tffile (printf "%s" "examples/connectors/salesforceConnector.tf") }}


## Saviynt Connector Flows

Connector ID (`connector_id` in the resource): `connectorSaviyntFlow`

Properties (used in the `property` block in the resource as the `name` parameter):

* `domainName` (string): Provide your Saviynt domain name. Console display name: "Saviynt Domain Name".
* `path` (string): Provide your Saviynt path name. Console display name: "Saviynt Path Name".
* `saviyntPassword` (string): Provide your Saviynt password. Console display name: "Saviynt Password".
* `saviyntUserName` (string): Provide your Saviynt user name. Console display name: "Saviynt User Name".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorSaviyntFlow.tf") }}


## Screen

Connector ID (`connector_id` in the resource): `screenConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/screenConnector.tf") }}


## SecurID

Connector ID (`connector_id` in the resource): `securIdConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiUrl` (string): The URL of your SecurID authentication API, such as "https://company.auth.securid.com". Console display name: "SecurID Authentication API REST URL".
* `clientKey` (string): Your SecurID authentication client key, such as "vowc450ahs6nry66vok0pvaizwnfr43ewsqcm7tz". Console display name: "Client Key".


Example:
{{ tffile (printf "%s" "examples/connectors/securIdConnector.tf") }}


## Securonix

Connector ID (`connector_id` in the resource): `connectorSecuronix`

Properties (used in the `property` block in the resource as the `name` parameter):

* `domainName` (string): Domain Name. Console display name: "Domain Name".
* `token` (string): Token for authentication. Console display name: "Token".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorSecuronix.tf") }}


## Segment

Connector ID (`connector_id` in the resource): `connectorSegment`

Properties (used in the `property` block in the resource as the `name` parameter):

* `version` (string): Segment - HTTP Tracking API Version. Console display name: "HTTP Tracking API Version".
* `writeKey` (string): The Write Key is used to send data to a specific workplace. Console display name: "Write Key".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorSegment.tf") }}


## SentiLink

Connector ID (`connector_id` in the resource): `sentilinkConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `account` (string): Account ID of SentiLink. Console display name: "Account ID".
* `apiUrl` (string):  Console display name: "API URL".
* `javascriptCdnUrl` (string):  Console display name: "Javascript CDN URL".
* `token` (string): Token ID for SentiLink account. Console display name: "Token ID".


Example:
{{ tffile (printf "%s" "examples/connectors/sentilinkConnector.tf") }}


## ServiceNow

Connector ID (`connector_id` in the resource): `servicenowConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `adminUsername` (string): Your ServiceNow administrator username. Console display name: "Username".
* `apiUrl` (string): The API URL to target, such as "https://mycompany.service-now.com". Console display name: "API URL".
* `password` (string): Your ServiceNow administrator password. Console display name: "Password".


Example:
{{ tffile (printf "%s" "examples/connectors/servicenowConnector.tf") }}


## Shopify Connector

Connector ID (`connector_id` in the resource): `connectorShopify`

Properties (used in the `property` block in the resource as the `name` parameter):

* `accessToken` (string): Your store's unique Admin API Access Token that goes into the X-Shopify-Access-Token property. Required scopes when generating Admin API Access Token: 'read_customers' and 'write_customers'. Note any Custom Shopify API calls you intend to use with this connector via Make Custom API Call capability, will have to be added as well. Console display name: "Admin API Access Token".
* `apiVersion` (string): The Shopify version name ( ex. 2022-04 ). Console display name: "API Version Name".
* `multipassSecret` (string): Shopify Multipass Secret. Console display name: "Multipass Secret".
* `multipassStoreDomain` (string): Shopify Multipass Store Domain (yourstorename.myshopify.com). Console display name: "Multipass Store Domain".
* `yourStoreName` (string): The name of your store as Shopify identifies you ( first text that comes after HTTPS:// ). Console display name: "Store Name".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorShopify.tf") }}


## Signicat

Connector ID (`connector_id` in the resource): `connectorSignicat`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorSignicat.tf") }}


## Singpass Login

Connector ID (`connector_id` in the resource): `singpassLoginConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/singpassLoginConnector.tf") }}


## Slack Login

Connector ID (`connector_id` in the resource): `slackConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `oauth2` (json):  Console display name: "Oauth2 Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/slackConnector.tf") }}


## Smarty Address Validator

Connector ID (`connector_id` in the resource): `connectorSmarty`

Properties (used in the `property` block in the resource as the `name` parameter):

* `authId` (string): Smarty Authentication ID (Found on 'API Keys' tab in Smarty tenant). Console display name: "Auth ID".
* `authToken` (string): Smarty Authentication Token (Found on 'API Keys' tab in Smarty tenant). Console display name: "Auth Token".
* `license` (string): Smarty License Value (Found on 'Subscriptions' tab in Smarty tenant). Console display name: "License".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorSmarty.tf") }}


## Socure

Connector ID (`connector_id` in the resource): `socureConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): ID+ Key is the API key that you can retrieve from Socure Admin Portal. Console display name: "ID+ Key".
* `baseUrl` (string): The Socure API URL to target. For a custom value, select Use Custom API URL and enter a value in the Custom API URL field. Console display name: "API URL".
* `customApiUrl` (string): The URL for the Socure API, such as "https://example.socure.com". Console display name: "Custom API URL".
* `sdkKey` (string): SDK Key that you can retrieve from Socure Admin Portal. Console display name: "SDK Key".
* `skWebhookUri` (string): Use this url as the Webhook URL in the Third Party Integration's configuration. Console display name: "Webhook URL".


Example:
{{ tffile (printf "%s" "examples/connectors/socureConnector.tf") }}


## Splunk

Connector ID (`connector_id` in the resource): `splunkConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiUrl` (string): The Base API URL for Splunk. Console display name: "Base URL".
* `port` (number): API Server Port. Console display name: "Port".
* `token` (string): Splunk Token to make API requests. Console display name: "Token".


Example:
{{ tffile (printf "%s" "examples/connectors/splunkConnector.tf") }}


## Spotify

Connector ID (`connector_id` in the resource): `connectorSpotify`

Properties (used in the `property` block in the resource as the `name` parameter):

* `oauth2` (json):  Console display name: "Oauth2 Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorSpotify.tf") }}


## SpyCloud Enterprise Protection

Connector ID (`connector_id` in the resource): `connectorSpycloud`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): Contact SpyCloud to acquire an Employee ATO Prevention API Key that will work with DaVinci. Console display name: "SpyCloud Employee ATO Prevention API Key".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorSpycloud.tf") }}


## String

Connector ID (`connector_id` in the resource): `stringsConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/stringsConnector.tf") }}


## Svipe

Connector ID (`connector_id` in the resource): `connectorSvipe`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorSvipe.tf") }}


## TMT Analysis

Connector ID (`connector_id` in the resource): `tmtConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): API Key for TMT Analysis. Console display name: "API Key".
* `apiSecret` (string): API Secret for TMT Analysis. Console display name: "API Secret".
* `apiUrl` (string): The Base API URL for TMT Analysis. Console display name: "Base URL".


Example:
{{ tffile (printf "%s" "examples/connectors/tmtConnector.tf") }}


## Teleport

Connector ID (`connector_id` in the resource): `nodeConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/nodeConnector.tf") }}


## Telesign

Connector ID (`connector_id` in the resource): `telesignConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `authDescription` (string):  Console display name: "Authentication Description".
* `connectorName` (string):  Console display name: "Connector Name".
* `description` (string):  Console display name: "Description".
* `details1` (string):  Console display name: "Credentials Details 1".
* `details2` (string):  Console display name: "Credentials Details 2".
* `iconUrl` (string):  Console display name: "Icon URL".
* `iconUrlPng` (string):  Console display name: "Icon URL in PNG".
* `password` (string):  Console display name: "Password".
* `providerName` (string):  Console display name: "Provider Name".
* `showCredAddedOn` (boolean):  Console display name: "Show Credentials Added On?".
* `showCredAddedVia` (boolean):  Console display name: "Show Credentials Added through ?".
* `title` (string):  Console display name: "Title".
* `toolTip` (string):  Console display name: "Tooltip".
* `username` (string):  Console display name: "Username".


Example:
{{ tffile (printf "%s" "examples/connectors/telesignConnector.tf") }}


## Token Management

Connector ID (`connector_id` in the resource): `skOpenIdConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/skOpenIdConnector.tf") }}


## TransUnion TLOxp

Connector ID (`connector_id` in the resource): `tutloxpConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiUrl` (string): The URL for your TransUnion API. Unnecessary to change unless you're testing against a demo tenant. Console display name: "API URL".
* `dppaCode` (string): The DPPA code that determines the level of data access in the API. Console display name: "DPPA Purpose Code".
* `glbCode` (string): The GLB code that determines the level of data access in the API. Console display name: "GLB Purpose Code".
* `password` (string): The password for your API User. Console display name: "Password".
* `username` (string): The username for your API user. Console display name: "Username".


Example:
{{ tffile (printf "%s" "examples/connectors/tutloxpConnector.tf") }}


## TransUnion TruValidate

Connector ID (`connector_id` in the resource): `transunionConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiUrl` (string): The Base API URL for TransUnion. Console display name: "Base URL".
* `docVerificationPassword` (string): Password for Document Verification, provided by TransUnion. Console display name: "Password".
* `docVerificationPublicKey` (string): Public Key for Document Verification, provided by TransUnion. Console display name: "Public Key".
* `docVerificationSecret` (string): Secret for Document Verification, provided by TransUnion. Console display name: "Secret".
* `docVerificationSiteId` (string): Site ID for Document Verification, provided by TransUnion. Console display name: "Site ID".
* `docVerificationUsername` (string): Username for Document Verification, provided by TransUnion. Console display name: "Username".
* `idVerificationPassword` (string): Password for ID Verification, provided by TransUnion. Console display name: "Password".
* `idVerificationPublicKey` (string): Public Key for ID Verification, provided by TransUnion. Console display name: "Public Key".
* `idVerificationSecret` (string): Secret for ID Verification, provided by TransUnion. Console display name: "Secret".
* `idVerificationSiteId` (string): Site ID for ID Verification, provided by TransUnion. Console display name: "Site ID".
* `idVerificationUsername` (string): Username for ID Verification, provided by TransUnion. Console display name: "Username".
* `kbaPassword` (string): Password for KBA, provided by TransUnion. Console display name: "Password".
* `kbaPublicKey` (string): Public Key for KBA, provided by TransUnion. Console display name: "Public Key".
* `kbaSecret` (string): Secret for KBA, provided by TransUnion. Console display name: "Secret".
* `kbaSiteId` (string): Site ID for KBA, provided by TransUnion. Console display name: "Site ID".
* `kbaUsername` (string): Username for KBA, provided by TransUnion. Console display name: "Username".
* `otpPassword` (string): Password for otp Verification, provided by TransUnion. Console display name: "Password".
* `otpPublicKey` (string): Public Key for otp Verification, provided by TransUnion. Console display name: "Public Key".
* `otpSecret` (string): Secret for otp Verification, provided by TransUnion. Console display name: "Secret".
* `otpSiteId` (string): Site ID for otp Verification, provided by TransUnion. Console display name: "Site ID".
* `otpUsername` (string): Username for otp Verification, provided by TransUnion. Console display name: "Username".


Example:
{{ tffile (printf "%s" "examples/connectors/transunionConnector.tf") }}


## Trulioo

Connector ID (`connector_id` in the resource): `connectorTrulioo`

Properties (used in the `property` block in the resource as the `name` parameter):

* `clientID` (string): Trulioo Client ID. Console display name: "Client ID".
* `clientSecret` (string): Trulioo Client Secret. Console display name: "Client Secret".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorTrulioo.tf") }}


## Twilio

Connector ID (`connector_id` in the resource): `twilioConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `accountSid` (string):  Console display name: "Account Sid".
* `authDescription` (string):  Console display name: "Authentication Description".
* `authMessageTemplate` (string):  Console display name: "Text Message Template (Authentication)".
* `authToken` (string):  Console display name: "Auth Token".
* `connectorName` (string):  Console display name: "Connector Name".
* `connectorName` (string):  Console display name: "Connector Name".
* `description` (string):  Console display name: "Description".
* `details1` (string):  Console display name: "Credentials Details 1".
* `details2` (string):  Console display name: "Credentials Details 2".
* `iconUrl` (string):  Console display name: "Icon URL".
* `iconUrlPng` (string):  Console display name: "Icon URL in PNG".
* `registerMessageTemplate` (string):  Console display name: "Text Message Template (Registration)".
* `senderPhoneNumber` (string):  Console display name: "Sender Phone Number".
* `showCredAddedOn` (boolean):  Console display name: "Show Credentials Added On?".
* `showCredAddedVia` (boolean):  Console display name: "Show Credentials Added through ?".
* `title` (string):  Console display name: "Title".
* `toolTip` (string):  Console display name: "Tooltip".


Example:
{{ tffile (printf "%s" "examples/connectors/twilioConnector.tf") }}


## UnifyID

Connector ID (`connector_id` in the resource): `unifyIdConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `accountId` (string):  Console display name: "Account ID".
* `apiKey` (string):  Console display name: "API Key".
* `connectorName` (string):  Console display name: "Connector Name".
* `details1` (string):  Console display name: "Credentials Details 1".
* `details2` (string):  Console display name: "Credentials Details 2".
* `iconUrl` (string):  Console display name: "Icon URL".
* `iconUrlPng` (string):  Console display name: "Icon URL in PNG".
* `sdkToken` (string):  Console display name: "SDK Token".
* `showCredAddedOn` (boolean):  Console display name: "Show Credentials Added On?".
* `showCredAddedVia` (boolean):  Console display name: "Show Credentials Added through ?".
* `toolTip` (string):  Console display name: "Tooltip".


Example:
{{ tffile (printf "%s" "examples/connectors/unifyIdConnector.tf") }}


## User Policy

Connector ID (`connector_id` in the resource): `userPolicyConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `passwordExpiryInDays` (number): Choose 0 for never expire. Console display name: "Expires in the specified number of days".
* `passwordExpiryNotification` (boolean):  Console display name: "Notify user before password expires".
* `passwordLengthMax` (number):  Console display name: "Maximum Password Length".
* `passwordLengthMin` (number):  Console display name: "Minimum Password Length".
* `passwordLockoutAttempts` (number):  Console display name: "Number of failed login attempts before account is locked".
* `passwordPreviousXPasswords` (number): Choose 0 if any previous passwords are allowed. This is not recommended. Console display name: "Number of unique user passwords associated with a user".
* `passwordRequireLowercase` (boolean): Should the password contain lowercase characters?. Console display name: "Require Lowercase Characters".
* `passwordRequireNumbers` (boolean): Should the password contain numbers?. Console display name: "Require Numbers".
* `passwordRequireSpecial` (boolean): Should the password contain special character?. Console display name: "Require Special Characters".
* `passwordRequireUppercase` (boolean): Should the password contain uppercase characters?. Console display name: "Require Uppercase Characters".
* `passwordSpacesOk` (boolean): Are spaces allowed in the password?. Console display name: "Spaces Accepted".
* `passwordsEnabled` (boolean):  Console display name: "Passwords Feature Enabled?".
* `temporaryPasswordExpiryInDays` (number): If an administrator sets a temporary password, choose how long before it expires. Console display name: "Temporary password expires in the specified number of days".


Example:
{{ tffile (printf "%s" "examples/connectors/userPolicyConnector.tf") }}


## User Pool

Connector ID (`connector_id` in the resource): `skUserPool`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAttributes` (json):  


Example:
{{ tffile (printf "%s" "examples/connectors/skUserPool.tf") }}


## ValidSoft

Connector ID (`connector_id` in the resource): `connectorValidsoft`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorValidsoft.tf") }}


## Variable

Connector ID (`connector_id` in the resource): `variablesConnector`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/variablesConnector.tf") }}


## Vericlouds

Connector ID (`connector_id` in the resource): `connectorVericlouds`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiSecret` (string): The API secret assigned by VeriClouds to the customer. The secret is also used for decrypting sensitive data such as leaked passwords. It is important to never share the secret with any 3rd party. Console display name: "apiSecret".
* `apikey` (string): The API key assigned by VeriClouds to the customer. Console display name: "apiKey".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorVericlouds.tf") }}


## Veriff

Connector ID (`connector_id` in the resource): `veriffConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `access_token` (string): The API Key provided by Veriff, such as "323aa031-b4af-4e12-b354-de0da91a2ab0". Console display name: "API Key".
* `baseUrl` (string): The API URL to target, such as “https://stationapi.veriff.com/”. Console display name: "Base URL".
* `password` (string): The Share Secret Key from Veriff to create HMAC signature, such as "20bf4sf0-fbg7-488c-b4f1-d9594lf707bk". Console display name: "Shared Secret Key".


Example:
{{ tffile (printf "%s" "examples/connectors/veriffConnector.tf") }}


## Verosint

Connector ID (`connector_id` in the resource): `connector443id`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): This is the API key from your Verosint account. Remember, Your API KEY is like a serial number for your policy. If you want to utilize more than one policy, you can generate another API KEY and tailor that to a custom policy. Console display name: "API Key".


Example:
{{ tffile (printf "%s" "examples/connectors/connector443id.tf") }}


## Webhook

Connector ID (`connector_id` in the resource): `webhookConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `urls` (string): POST requests will be made to these registered url as selected later. Console display name: "Register URLs".


Example:
{{ tffile (printf "%s" "examples/connectors/webhookConnector.tf") }}


## WhatsApp for Business

Connector ID (`connector_id` in the resource): `connectorWhatsAppBusiness`

Properties (used in the `property` block in the resource as the `name` parameter):

* `accessToken` (string): WhatsApp Access Token. Console display name: "Access Token".
* `appSecret` (string): WhatsApp App Secret for the application, it is used to verify the webhook signatures. Console display name: "App Secret".
* `skWebhookUri` (string): Use this url as the Webhook URL in the Third Party Integration's configuration. Console display name: "Redirect Webhook URI".
* `verifyToken` (string): Meta webhook verify token. Console display name: "Webhook Verify Token".
* `version` (string): WhatsApp Graph API Version. Console display name: "Version".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorWhatsAppBusiness.tf") }}


## WinMagic

Connector ID (`connector_id` in the resource): `connectorWinmagic`

Properties (used in the `property` block in the resource as the `name` parameter):

* `openId` (json):  Console display name: "OpenId Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorWinmagic.tf") }}


## WireWheel

Connector ID (`connector_id` in the resource): `wireWheelConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `baseURL` (string): The base API URL of the WireWheel environment. Console display name: "WireWheel Base API URL".
* `clientId` (string): Client ID from WireWheel Channel settings. Console display name: "Client ID".
* `clientSecret` (string): Client Secret from WireWheel Channel settings. Console display name: "Client Secret".
* `issuerId` (string): Issuer URL from WireWheel Channel settings. Console display name: "Issuer URL".


Example:
{{ tffile (printf "%s" "examples/connectors/wireWheelConnector.tf") }}


## X Login

Connector ID (`connector_id` in the resource): `twitterIdpConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/twitterIdpConnector.tf") }}


## Yoti

Connector ID (`connector_id` in the resource): `yotiConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/yotiConnector.tf") }}


## Zendesk

Connector ID (`connector_id` in the resource): `connectorZendesk`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiToken` (string): An Active Zendesk API Token (admin center->Apps&Integrations->Zendesk API). Console display name: "Zendesk API Token".
* `emailUsername` (string): Email used as 'username' for your Zendesk account. Console display name: "Email of User (username)".
* `subdomain` (string): Your Zendesk subdomain (ex. {subdomain}.zendesk.com/api/v2/...). Console display name: "Subdomain".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorZendesk.tf") }}


## iProov

Connector ID (`connector_id` in the resource): `iproovConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `allowLandscape` (boolean):  Console display name: "Allow Landscape".
* `apiKey` (string):  Console display name: "API Key".
* `authDescription` (string):  Console display name: "Authentication Description".
* `baseUrl` (string):  Console display name: "Base URL".
* `color1` (string): Ex. #000000. Console display name: "Loading Tint Color".
* `color2` (string): Ex. #000000. Console display name: "Not Ready Tint Color".
* `color3` (string): Ex. #000000. Console display name: "Ready Tint Color".
* `color4` (string): Ex. #000000. Console display name: "Liveness Tint Color".
* `connectorName` (string):  Console display name: "Connector Name".
* `customTitle` (string): Specify a custom title to be shown. Defaults to show an iProov-generated message. Set to empty string "" to hide the message entirely.  Console display name: "Custom Title".
* `description` (string):  Console display name: "Description".
* `details1` (string):  Console display name: "Credentials Details 1".
* `details2` (string):  Console display name: "Credentials Details 2".
* `enableCameraSelector` (boolean):  Console display name: "Enable Camera Selector".
* `iconUrl` (string):  Console display name: "Icon URL".
* `iconUrlPng` (string):  Console display name: "Icon URL in PNG".
* `javascriptCSSUrl` (string):  Console display name: "CSS URL".
* `javascriptCdnUrl` (string):  Console display name: "Javascript CDN URL".
* `kioskMode` (boolean):  Console display name: "Kiosk Mode".
* `logo` (string): You can use a custom logo by simply passing a relative link, absolute path or data URI to your logo. If you do not want a logo to show pass the logo attribute as null. Console display name: "Logo".
* `password` (string):  Console display name: "Password".
* `secret` (string):  Console display name: "Secret".
* `showCountdown` (boolean):  Console display name: "Show Countdown".
* `showCredAddedOn` (boolean):  Console display name: "Show Credentials Added On?".
* `showCredAddedVia` (boolean):  Console display name: "Show Credentials Added through ?".
* `startScreenTitle` (string):  Console display name: "Start Screen Title".
* `title` (string):  Console display name: "Title".
* `toolTip` (string):  Console display name: "Tooltip".
* `username` (string):  Console display name: "Username".


Example:
{{ tffile (printf "%s" "examples/connectors/iproovConnector.tf") }}


## iovation

Connector ID (`connector_id` in the resource): `iovationConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiUrl` (string):  Console display name: "API Server URL".
* `javascriptCdnUrl` (string): iovation loader javascript CDN. Console display name: "iovation loader Javascript CDN URL".
* `subKey` (string): This will be an iovation assigned value that tracks requests from your site. This is primarily used for debugging and troubleshooting purposes. Console display name: "Sub Key".
* `subscriberAccount` (string):  Console display name: "Subscriber Account".
* `subscriberId` (string):  Console display name: "Subscriber ID".
* `subscriberPasscode` (string):  Console display name: "Subscriber Passcode".
* `version` (string): This is the version of the script to load. The value should either correspond to a specific version you wish to use, or one of the following aliases to get the latest version of the code: general5 - the latest stable version of the javascript, early5 - the latest available version of the javascript. Console display name: "Version".


Example:
{{ tffile (printf "%s" "examples/connectors/iovationConnector.tf") }}


## ipgeolocation.io

Connector ID (`connector_id` in the resource): `connectorIPGeolocationio`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): Developer subscription API key. Console display name: "API key".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorIPGeolocationio.tf") }}


## ipregistry

Connector ID (`connector_id` in the resource): `connectorIPregistry`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): API Key used to authenticate to the ipregistry.co API. Console display name: "API Key".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorIPregistry.tf") }}


## ipstack

Connector ID (`connector_id` in the resource): `connectorIPStack`

Properties (used in the `property` block in the resource as the `name` parameter):

* `allowInsecureIPStackConnection` (string): The Free IPStack Subscription Plan does not support HTTPS connections. For more information refer to https://ipstack.com/plan. Console display name: "Allow Insecure ipstack Connection?".
* `apiKey` (string): The ipstack API key to use the service. Console display name: "API key".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorIPStack.tf") }}


## neoEYED

Connector ID (`connector_id` in the resource): `neoeyedConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `appKey` (string): Unique key for the application. Console display name: "Application Key".
* `javascriptCdnUrl` (string): URL of javascript CDN of neoEYED. Console display name: "Javascript CDN URL".


Example:
{{ tffile (printf "%s" "examples/connectors/neoeyedConnector.tf") }}


## randomuser.me

Connector ID (`connector_id` in the resource): `connectorRandomUserMe`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/connectorRandomUserMe.tf") }}


## tru.ID

Connector ID (`connector_id` in the resource): `connectorTruid`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorTruid.tf") }}

onsole display name: "Custom Title".
* `description` (string):  Console display name: "Description".
* `details1` (string):  Console display name: "Credentials Details 1".
* `details2` (string):  Console display name: "Credentials Details 2".
* `enableCameraSelector` (boolean):  Console display name: "Enable Camera Selector".
* `iconUrl` (string):  Console display name: "Icon URL".
* `iconUrlPng` (string):  Console display name: "Icon URL in PNG".
* `javascriptCSSUrl` (string):  Console display name: "CSS URL".
* `javascriptCdnUrl` (string):  Console display name: "Javascript CDN URL".
* `kioskMode` (boolean):  Console display name: "Kiosk Mode".
* `logo` (string): You can use a custom logo by simply passing a relative link, absolute path or data URI to your logo. If you do not want a logo to show pass the logo attribute as null. Console display name: "Logo".
* `password` (string):  Console display name: "Password".
* `secret` (string):  Console display name: "Secret".
* `showCountdown` (boolean):  Console display name: "Show Countdown".
* `showCredAddedOn` (boolean):  Console display name: "Show Credentials Added On?".
* `showCredAddedVia` (boolean):  Console display name: "Show Credentials Added through ?".
* `startScreenTitle` (string):  Console display name: "Start Screen Title".
* `title` (string):  Console display name: "Title".
* `toolTip` (string):  Console display name: "Tooltip".
* `username` (string):  Console display name: "Username".


Example:
{{ tffile (printf "%s" "examples/connectors/iproovConnector.tf") }}


## iovation

Connector ID (`connector_id` in the resource): `iovationConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiUrl` (string):  Console display name: "API Server URL".
* `javascriptCdnUrl` (string): iovation loader javascript CDN. Console display name: "iovation loader Javascript CDN URL".
* `subKey` (string): This will be an iovation assigned value that tracks requests from your site. This is primarily used for debugging and troubleshooting purposes. Console display name: "Sub Key".
* `subscriberAccount` (string):  Console display name: "Subscriber Account".
* `subscriberId` (string):  Console display name: "Subscriber ID".
* `subscriberPasscode` (string):  Console display name: "Subscriber Passcode".
* `version` (string): This is the version of the script to load. The value should either correspond to a specific version you wish to use, or one of the following aliases to get the latest version of the code: general5 - the latest stable version of the javascript, early5 - the latest available version of the javascript. Console display name: "Version".


Example:
{{ tffile (printf "%s" "examples/connectors/iovationConnector.tf") }}


## ipgeolocation.io

Connector ID (`connector_id` in the resource): `connectorIPGeolocationio`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): Developer subscription API key. Console display name: "API key".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorIPGeolocationio.tf") }}


## ipregistry

Connector ID (`connector_id` in the resource): `connectorIPregistry`

Properties (used in the `property` block in the resource as the `name` parameter):

* `apiKey` (string): API Key used to authenticate to the ipregistry.co API. Console display name: "API Key".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorIPregistry.tf") }}


## ipstack

Connector ID (`connector_id` in the resource): `connectorIPStack`

Properties (used in the `property` block in the resource as the `name` parameter):

* `allowInsecureIPStackConnection` (string): The Free IPStack Subscription Plan does not support HTTPS connections. For more information refer to https://ipstack.com/plan. Console display name: "Allow Insecure ipstack Connection?".
* `apiKey` (string): The ipstack API key to use the service. Console display name: "API key".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorIPStack.tf") }}


## neoEYED

Connector ID (`connector_id` in the resource): `neoeyedConnector`

Properties (used in the `property` block in the resource as the `name` parameter):

* `appKey` (string): Unique key for the application. Console display name: "Application Key".
* `javascriptCdnUrl` (string): URL of javascript CDN of neoEYED. Console display name: "Javascript CDN URL".


Example:
{{ tffile (printf "%s" "examples/connectors/neoeyedConnector.tf") }}


## randomuser.me

Connector ID (`connector_id` in the resource): `connectorRandomUserMe`

*No properties*


Example:
{{ tffile (printf "%s" "examples/connectors/connectorRandomUserMe.tf") }}


## tru.ID

Connector ID (`connector_id` in the resource): `connectorTruid`

Properties (used in the `property` block in the resource as the `name` parameter):

* `customAuth` (json):  Console display name: "Custom Parameters".


Example:
{{ tffile (printf "%s" "examples/connectors/connectorTruid.tf") }}

