/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2021-10-17
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
	"time"
)

// FIDOPolicy struct for FIDOPolicy
type FIDOPolicy struct {
	// FIDO policy's UUID.
	Id *string `json:"id,omitempty"`
	// The time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	Embedded map[string]interface{} `json:"_embedded,omitempty"`
	Environment *ObjectEnvironment `json:"environment,omitempty"`
	// The name to use for the FIDO policy.
	Name string `json:"name"`
	// Description of the FIDO policy.
	Description *string `json:"description,omitempty"`
	AttestationRequirements EnumFIDOAttestationRequirements `json:"attestationRequirements"`
	// If `attestationRequirements` is set to `SPECIFIC`, this array is used to specify the authenticators that you want to allow.
	AllowedAuthenticators []FIDOPolicyAllowedAuthenticatorsInner `json:"allowedAuthenticators,omitempty"`
	// This parameter is relevant only if you have set `attestationRequirements` to `SPECIFIC` in order to restrict usage to only certain authenticators. If set to `true`, the policy will be applied both during registration and during each authentication attempt. If set to `false`, the policy is applied only during registration. Default is `false`.
	EnforceDuringAuthentication *bool `json:"enforceDuringAuthentication,omitempty"`
	// Whether this policy should serve as the default FIDO policy.
	Default *bool `json:"default,omitempty"`
	ResidentKeyRequirement EnumFIDOResidentKeyRequirement `json:"residentKeyRequirement"`
}

// NewFIDOPolicy instantiates a new FIDOPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFIDOPolicy(name string, attestationRequirements EnumFIDOAttestationRequirements, residentKeyRequirement EnumFIDOResidentKeyRequirement) *FIDOPolicy {
	this := FIDOPolicy{}
	this.Name = name
	this.AttestationRequirements = attestationRequirements
	var enforceDuringAuthentication bool = false
	this.EnforceDuringAuthentication = &enforceDuringAuthentication
	this.ResidentKeyRequirement = residentKeyRequirement
	return &this
}

// NewFIDOPolicyWithDefaults instantiates a new FIDOPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFIDOPolicyWithDefaults() *FIDOPolicy {
	this := FIDOPolicy{}
	var enforceDuringAuthentication bool = false
	this.EnforceDuringAuthentication = &enforceDuringAuthentication
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FIDOPolicy) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FIDOPolicy) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FIDOPolicy) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FIDOPolicy) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *FIDOPolicy) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FIDOPolicy) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
    return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *FIDOPolicy) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *FIDOPolicy) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *FIDOPolicy) GetUpdatedAt() time.Time {
	if o == nil || isNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FIDOPolicy) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.UpdatedAt) {
    return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *FIDOPolicy) HasUpdatedAt() bool {
	if o != nil && !isNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *FIDOPolicy) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetEmbedded returns the Embedded field value if set, zero value otherwise.
func (o *FIDOPolicy) GetEmbedded() map[string]interface{} {
	if o == nil || isNil(o.Embedded) {
		var ret map[string]interface{}
		return ret
	}
	return o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FIDOPolicy) GetEmbeddedOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Embedded) {
    return map[string]interface{}{}, false
	}
	return o.Embedded, true
}

// HasEmbedded returns a boolean if a field has been set.
func (o *FIDOPolicy) HasEmbedded() bool {
	if o != nil && !isNil(o.Embedded) {
		return true
	}

	return false
}

// SetEmbedded gets a reference to the given map[string]interface{} and assigns it to the Embedded field.
func (o *FIDOPolicy) SetEmbedded(v map[string]interface{}) {
	o.Embedded = v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *FIDOPolicy) GetEnvironment() ObjectEnvironment {
	if o == nil || isNil(o.Environment) {
		var ret ObjectEnvironment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FIDOPolicy) GetEnvironmentOk() (*ObjectEnvironment, bool) {
	if o == nil || isNil(o.Environment) {
    return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *FIDOPolicy) HasEnvironment() bool {
	if o != nil && !isNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectEnvironment and assigns it to the Environment field.
func (o *FIDOPolicy) SetEnvironment(v ObjectEnvironment) {
	o.Environment = &v
}

// GetName returns the Name field value
func (o *FIDOPolicy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FIDOPolicy) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FIDOPolicy) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FIDOPolicy) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FIDOPolicy) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FIDOPolicy) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FIDOPolicy) SetDescription(v string) {
	o.Description = &v
}

// GetAttestationRequirements returns the AttestationRequirements field value
func (o *FIDOPolicy) GetAttestationRequirements() EnumFIDOAttestationRequirements {
	if o == nil {
		var ret EnumFIDOAttestationRequirements
		return ret
	}

	return o.AttestationRequirements
}

// GetAttestationRequirementsOk returns a tuple with the AttestationRequirements field value
// and a boolean to check if the value has been set.
func (o *FIDOPolicy) GetAttestationRequirementsOk() (*EnumFIDOAttestationRequirements, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AttestationRequirements, true
}

// SetAttestationRequirements sets field value
func (o *FIDOPolicy) SetAttestationRequirements(v EnumFIDOAttestationRequirements) {
	o.AttestationRequirements = v
}

// GetAllowedAuthenticators returns the AllowedAuthenticators field value if set, zero value otherwise.
func (o *FIDOPolicy) GetAllowedAuthenticators() []FIDOPolicyAllowedAuthenticatorsInner {
	if o == nil || isNil(o.AllowedAuthenticators) {
		var ret []FIDOPolicyAllowedAuthenticatorsInner
		return ret
	}
	return o.AllowedAuthenticators
}

// GetAllowedAuthenticatorsOk returns a tuple with the AllowedAuthenticators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FIDOPolicy) GetAllowedAuthenticatorsOk() ([]FIDOPolicyAllowedAuthenticatorsInner, bool) {
	if o == nil || isNil(o.AllowedAuthenticators) {
    return nil, false
	}
	return o.AllowedAuthenticators, true
}

// HasAllowedAuthenticators returns a boolean if a field has been set.
func (o *FIDOPolicy) HasAllowedAuthenticators() bool {
	if o != nil && !isNil(o.AllowedAuthenticators) {
		return true
	}

	return false
}

// SetAllowedAuthenticators gets a reference to the given []FIDOPolicyAllowedAuthenticatorsInner and assigns it to the AllowedAuthenticators field.
func (o *FIDOPolicy) SetAllowedAuthenticators(v []FIDOPolicyAllowedAuthenticatorsInner) {
	o.AllowedAuthenticators = v
}

// GetEnforceDuringAuthentication returns the EnforceDuringAuthentication field value if set, zero value otherwise.
func (o *FIDOPolicy) GetEnforceDuringAuthentication() bool {
	if o == nil || isNil(o.EnforceDuringAuthentication) {
		var ret bool
		return ret
	}
	return *o.EnforceDuringAuthentication
}

// GetEnforceDuringAuthenticationOk returns a tuple with the EnforceDuringAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FIDOPolicy) GetEnforceDuringAuthenticationOk() (*bool, bool) {
	if o == nil || isNil(o.EnforceDuringAuthentication) {
    return nil, false
	}
	return o.EnforceDuringAuthentication, true
}

// HasEnforceDuringAuthentication returns a boolean if a field has been set.
func (o *FIDOPolicy) HasEnforceDuringAuthentication() bool {
	if o != nil && !isNil(o.EnforceDuringAuthentication) {
		return true
	}

	return false
}

// SetEnforceDuringAuthentication gets a reference to the given bool and assigns it to the EnforceDuringAuthentication field.
func (o *FIDOPolicy) SetEnforceDuringAuthentication(v bool) {
	o.EnforceDuringAuthentication = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *FIDOPolicy) GetDefault() bool {
	if o == nil || isNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FIDOPolicy) GetDefaultOk() (*bool, bool) {
	if o == nil || isNil(o.Default) {
    return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *FIDOPolicy) HasDefault() bool {
	if o != nil && !isNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *FIDOPolicy) SetDefault(v bool) {
	o.Default = &v
}

// GetResidentKeyRequirement returns the ResidentKeyRequirement field value
func (o *FIDOPolicy) GetResidentKeyRequirement() EnumFIDOResidentKeyRequirement {
	if o == nil {
		var ret EnumFIDOResidentKeyRequirement
		return ret
	}

	return o.ResidentKeyRequirement
}

// GetResidentKeyRequirementOk returns a tuple with the ResidentKeyRequirement field value
// and a boolean to check if the value has been set.
func (o *FIDOPolicy) GetResidentKeyRequirementOk() (*EnumFIDOResidentKeyRequirement, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ResidentKeyRequirement, true
}

// SetResidentKeyRequirement sets field value
func (o *FIDOPolicy) SetResidentKeyRequirement(v EnumFIDOResidentKeyRequirement) {
	o.ResidentKeyRequirement = v
}

func (o FIDOPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !isNil(o.Embedded) {
		toSerialize["_embedded"] = o.Embedded
	}
	if !isNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["attestationRequirements"] = o.AttestationRequirements
	}
	if !isNil(o.AllowedAuthenticators) {
		toSerialize["allowedAuthenticators"] = o.AllowedAuthenticators
	}
	if !isNil(o.EnforceDuringAuthentication) {
		toSerialize["enforceDuringAuthentication"] = o.EnforceDuringAuthentication
	}
	if !isNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if true {
		toSerialize["residentKeyRequirement"] = o.ResidentKeyRequirement
	}
	return json.Marshal(toSerialize)
}

type NullableFIDOPolicy struct {
	value *FIDOPolicy
	isSet bool
}

func (v NullableFIDOPolicy) Get() *FIDOPolicy {
	return v.value
}

func (v *NullableFIDOPolicy) Set(val *FIDOPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableFIDOPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableFIDOPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFIDOPolicy(val *FIDOPolicy) *NullableFIDOPolicy {
	return &NullableFIDOPolicy{value: val, isSet: true}
}

func (v NullableFIDOPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFIDOPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


