/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2021-10-17
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
	"fmt"
)

// EnumTimeUnitPushTimeout The time unit for the `pushTimeout.duration` parameter. Currently, the only permitted value is `SECONDS`.
type EnumTimeUnitPushTimeout string

// List of EnumTimeUnitPushTimeout
const (
	ENUMTIMEUNITPUSHTIMEOUT_SECONDS EnumTimeUnitPushTimeout = "SECONDS"
)

// All allowed values of EnumTimeUnitPushTimeout enum
var AllowedEnumTimeUnitPushTimeoutEnumValues = []EnumTimeUnitPushTimeout{
	"SECONDS",
}

func (v *EnumTimeUnitPushTimeout) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumTimeUnitPushTimeout(value)
	for _, existing := range AllowedEnumTimeUnitPushTimeoutEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumTimeUnitPushTimeout", value)
}

// NewEnumTimeUnitPushTimeoutFromValue returns a pointer to a valid EnumTimeUnitPushTimeout
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumTimeUnitPushTimeoutFromValue(v string) (*EnumTimeUnitPushTimeout, error) {
	ev := EnumTimeUnitPushTimeout(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumTimeUnitPushTimeout: valid values are %v", v, AllowedEnumTimeUnitPushTimeoutEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumTimeUnitPushTimeout) IsValid() bool {
	for _, existing := range AllowedEnumTimeUnitPushTimeoutEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumTimeUnitPushTimeout value
func (v EnumTimeUnitPushTimeout) Ptr() *EnumTimeUnitPushTimeout {
	return &v
}

type NullableEnumTimeUnitPushTimeout struct {
	value *EnumTimeUnitPushTimeout
	isSet bool
}

func (v NullableEnumTimeUnitPushTimeout) Get() *EnumTimeUnitPushTimeout {
	return v.value
}

func (v *NullableEnumTimeUnitPushTimeout) Set(val *EnumTimeUnitPushTimeout) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumTimeUnitPushTimeout) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumTimeUnitPushTimeout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumTimeUnitPushTimeout(val *EnumTimeUnitPushTimeout) *NullableEnumTimeUnitPushTimeout {
	return &NullableEnumTimeUnitPushTimeout{value: val, isSet: true}
}

func (v NullableEnumTimeUnitPushTimeout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumTimeUnitPushTimeout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

