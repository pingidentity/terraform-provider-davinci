/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2021-10-17
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
	"fmt"
)

// EnumMFADevicePolicySelection The default method that should be used for authentication. Can take one of the following values: * `DEFAULT_TO_FIRST` - use the method that the user set as their default * `PROMPT_TO_SELECT` - always have the user select the method to use if there is more than one method available * `ALWAYS_PROMPT_TO_SELECT` - always have the user select the method to use even if there is only one method available If this parameter is not provided, the `DEFAULT_TO_FIRST` option is used. 
type EnumMFADevicePolicySelection string

// List of EnumMFADevicePolicySelection
const (
	ENUMMFADEVICEPOLICYSELECTION_DEFAULT_TO_FIRST EnumMFADevicePolicySelection = "DEFAULT_TO_FIRST"
	ENUMMFADEVICEPOLICYSELECTION_PROMPT_TO_SELECT EnumMFADevicePolicySelection = "PROMPT_TO_SELECT"
	ENUMMFADEVICEPOLICYSELECTION_ALWAYS_PROMPT_TO_SELECT EnumMFADevicePolicySelection = "ALWAYS_PROMPT_TO_SELECT"
)

// All allowed values of EnumMFADevicePolicySelection enum
var AllowedEnumMFADevicePolicySelectionEnumValues = []EnumMFADevicePolicySelection{
	"DEFAULT_TO_FIRST",
	"PROMPT_TO_SELECT",
	"ALWAYS_PROMPT_TO_SELECT",
}

func (v *EnumMFADevicePolicySelection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumMFADevicePolicySelection(value)
	for _, existing := range AllowedEnumMFADevicePolicySelectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumMFADevicePolicySelection", value)
}

// NewEnumMFADevicePolicySelectionFromValue returns a pointer to a valid EnumMFADevicePolicySelection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumMFADevicePolicySelectionFromValue(v string) (*EnumMFADevicePolicySelection, error) {
	ev := EnumMFADevicePolicySelection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumMFADevicePolicySelection: valid values are %v", v, AllowedEnumMFADevicePolicySelectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumMFADevicePolicySelection) IsValid() bool {
	for _, existing := range AllowedEnumMFADevicePolicySelectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumMFADevicePolicySelection value
func (v EnumMFADevicePolicySelection) Ptr() *EnumMFADevicePolicySelection {
	return &v
}

type NullableEnumMFADevicePolicySelection struct {
	value *EnumMFADevicePolicySelection
	isSet bool
}

func (v NullableEnumMFADevicePolicySelection) Get() *EnumMFADevicePolicySelection {
	return v.value
}

func (v *NullableEnumMFADevicePolicySelection) Set(val *EnumMFADevicePolicySelection) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumMFADevicePolicySelection) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumMFADevicePolicySelection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumMFADevicePolicySelection(val *EnumMFADevicePolicySelection) *NullableEnumMFADevicePolicySelection {
	return &NullableEnumMFADevicePolicySelection{value: val, isSet: true}
}

func (v NullableEnumMFADevicePolicySelection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumMFADevicePolicySelection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

