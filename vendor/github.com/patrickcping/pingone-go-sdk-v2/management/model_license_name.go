/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// LicenseName struct for LicenseName
type LicenseName struct {
	// The license name
	Name string `json:"name"`
}

// NewLicenseName instantiates a new LicenseName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseName(name string) *LicenseName {
	this := LicenseName{}
	this.Name = name
	return &this
}

// NewLicenseNameWithDefaults instantiates a new LicenseName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseNameWithDefaults() *LicenseName {
	this := LicenseName{}
	return &this
}

// GetName returns the Name field value
func (o *LicenseName) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LicenseName) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LicenseName) SetName(v string) {
	o.Name = v
}

func (o LicenseName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableLicenseName struct {
	value *LicenseName
	isSet bool
}

func (v NullableLicenseName) Get() *LicenseName {
	return v.value
}

func (v *NullableLicenseName) Set(val *LicenseName) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseName) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseName(val *LicenseName) *NullableLicenseName {
	return &NullableLicenseName{value: val, isSet: true}
}

func (v NullableLicenseName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


