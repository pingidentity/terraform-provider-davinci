/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumApplicationWSFEDKerberosGatewayType The gateway type. This must be \"LDAP\".
type EnumApplicationWSFEDKerberosGatewayType string

// List of EnumApplicationWSFEDKerberosGatewayType
const (
	ENUMAPPLICATIONWSFEDKERBEROSGATEWAYTYPE_LDAP EnumApplicationWSFEDKerberosGatewayType = "LDAP"
)

// All allowed values of EnumApplicationWSFEDKerberosGatewayType enum
var AllowedEnumApplicationWSFEDKerberosGatewayTypeEnumValues = []EnumApplicationWSFEDKerberosGatewayType{
	"LDAP",
}

func (v *EnumApplicationWSFEDKerberosGatewayType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumApplicationWSFEDKerberosGatewayType(value)
	for _, existing := range AllowedEnumApplicationWSFEDKerberosGatewayTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumApplicationWSFEDKerberosGatewayType", value)
}

// NewEnumApplicationWSFEDKerberosGatewayTypeFromValue returns a pointer to a valid EnumApplicationWSFEDKerberosGatewayType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumApplicationWSFEDKerberosGatewayTypeFromValue(v string) (*EnumApplicationWSFEDKerberosGatewayType, error) {
	ev := EnumApplicationWSFEDKerberosGatewayType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumApplicationWSFEDKerberosGatewayType: valid values are %v", v, AllowedEnumApplicationWSFEDKerberosGatewayTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumApplicationWSFEDKerberosGatewayType) IsValid() bool {
	for _, existing := range AllowedEnumApplicationWSFEDKerberosGatewayTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumApplicationWSFEDKerberosGatewayType value
func (v EnumApplicationWSFEDKerberosGatewayType) Ptr() *EnumApplicationWSFEDKerberosGatewayType {
	return &v
}

type NullableEnumApplicationWSFEDKerberosGatewayType struct {
	value *EnumApplicationWSFEDKerberosGatewayType
	isSet bool
}

func (v NullableEnumApplicationWSFEDKerberosGatewayType) Get() *EnumApplicationWSFEDKerberosGatewayType {
	return v.value
}

func (v *NullableEnumApplicationWSFEDKerberosGatewayType) Set(val *EnumApplicationWSFEDKerberosGatewayType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumApplicationWSFEDKerberosGatewayType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumApplicationWSFEDKerberosGatewayType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumApplicationWSFEDKerberosGatewayType(val *EnumApplicationWSFEDKerberosGatewayType) *NullableEnumApplicationWSFEDKerberosGatewayType {
	return &NullableEnumApplicationWSFEDKerberosGatewayType{value: val, isSet: true}
}

func (v NullableEnumApplicationWSFEDKerberosGatewayType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumApplicationWSFEDKerberosGatewayType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

