/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// TemplateContentEmailAllOfReplyTo struct for TemplateContentEmailAllOfReplyTo
type TemplateContentEmailAllOfReplyTo struct {
	// The email's \"reply to\" name. If the environment uses the Ping Identity email sender, the name \"PingOne\" is used. You can configure other email \"reply to\" names per environment. See [Note](https://apidocs.pingidentity.com/pingone/platform/v1/api/#from-replyTo-note) for details. 
	Name *string `json:"name,omitempty"`
	// The \"reply to\" email address. If the environment uses the Ping Identity email sender, or if the address field is empty, the address \"noreply@pingidentity.com\" is used. You can configure other email \"reply to\" addresses per environment. See [Note](https://apidocs.pingidentity.com/pingone/platform/v1/api/#from-replyTo-note) for details. 
	Address *string `json:"address,omitempty"`
}

// NewTemplateContentEmailAllOfReplyTo instantiates a new TemplateContentEmailAllOfReplyTo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateContentEmailAllOfReplyTo() *TemplateContentEmailAllOfReplyTo {
	this := TemplateContentEmailAllOfReplyTo{}
	var name string = "PingOne"
	this.Name = &name
	var address string = "noreply@pingidentity.com"
	this.Address = &address
	return &this
}

// NewTemplateContentEmailAllOfReplyToWithDefaults instantiates a new TemplateContentEmailAllOfReplyTo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateContentEmailAllOfReplyToWithDefaults() *TemplateContentEmailAllOfReplyTo {
	this := TemplateContentEmailAllOfReplyTo{}
	var name string = "PingOne"
	this.Name = &name
	var address string = "noreply@pingidentity.com"
	this.Address = &address
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TemplateContentEmailAllOfReplyTo) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateContentEmailAllOfReplyTo) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TemplateContentEmailAllOfReplyTo) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TemplateContentEmailAllOfReplyTo) SetName(v string) {
	o.Name = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *TemplateContentEmailAllOfReplyTo) GetAddress() string {
	if o == nil || isNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateContentEmailAllOfReplyTo) GetAddressOk() (*string, bool) {
	if o == nil || isNil(o.Address) {
    return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *TemplateContentEmailAllOfReplyTo) HasAddress() bool {
	if o != nil && !isNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *TemplateContentEmailAllOfReplyTo) SetAddress(v string) {
	o.Address = &v
}

func (o TemplateContentEmailAllOfReplyTo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	return json.Marshal(toSerialize)
}

type NullableTemplateContentEmailAllOfReplyTo struct {
	value *TemplateContentEmailAllOfReplyTo
	isSet bool
}

func (v NullableTemplateContentEmailAllOfReplyTo) Get() *TemplateContentEmailAllOfReplyTo {
	return v.value
}

func (v *NullableTemplateContentEmailAllOfReplyTo) Set(val *TemplateContentEmailAllOfReplyTo) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateContentEmailAllOfReplyTo) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateContentEmailAllOfReplyTo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateContentEmailAllOfReplyTo(val *TemplateContentEmailAllOfReplyTo) *NullableTemplateContentEmailAllOfReplyTo {
	return &NullableTemplateContentEmailAllOfReplyTo{value: val, isSet: true}
}

func (v NullableTemplateContentEmailAllOfReplyTo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateContentEmailAllOfReplyTo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


