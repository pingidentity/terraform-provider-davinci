/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// NotificationsSettingsReplyTo struct for NotificationsSettingsReplyTo
type NotificationsSettingsReplyTo struct {
	// A string that specifies the email's \"reply to\" name (relevant when `deliveryMethod` is `Email`).  See [Note](https://apidocs.pingidentity.com/pingone/platform/v1/api/#notifications-settings-from-replyTo-note) for details.
	Name *string `json:"name,omitempty"`
	// A string that specifies the email's \"reply to\" address (relevant when `deliveryMethod` is `Email`). This value must be a trusted email address.  See [Note](https://apidocs.pingidentity.com/pingone/platform/v1/api/#notifications-settings-from-replyTo-note) for details.
	Address *string `json:"address,omitempty"`
}

// NewNotificationsSettingsReplyTo instantiates a new NotificationsSettingsReplyTo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationsSettingsReplyTo() *NotificationsSettingsReplyTo {
	this := NotificationsSettingsReplyTo{}
	return &this
}

// NewNotificationsSettingsReplyToWithDefaults instantiates a new NotificationsSettingsReplyTo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationsSettingsReplyToWithDefaults() *NotificationsSettingsReplyTo {
	this := NotificationsSettingsReplyTo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NotificationsSettingsReplyTo) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsSettingsReplyTo) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NotificationsSettingsReplyTo) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NotificationsSettingsReplyTo) SetName(v string) {
	o.Name = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *NotificationsSettingsReplyTo) GetAddress() string {
	if o == nil || isNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsSettingsReplyTo) GetAddressOk() (*string, bool) {
	if o == nil || isNil(o.Address) {
    return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *NotificationsSettingsReplyTo) HasAddress() bool {
	if o != nil && !isNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *NotificationsSettingsReplyTo) SetAddress(v string) {
	o.Address = &v
}

func (o NotificationsSettingsReplyTo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationsSettingsReplyTo struct {
	value *NotificationsSettingsReplyTo
	isSet bool
}

func (v NullableNotificationsSettingsReplyTo) Get() *NotificationsSettingsReplyTo {
	return v.value
}

func (v *NullableNotificationsSettingsReplyTo) Set(val *NotificationsSettingsReplyTo) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationsSettingsReplyTo) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationsSettingsReplyTo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationsSettingsReplyTo(val *NotificationsSettingsReplyTo) *NullableNotificationsSettingsReplyTo {
	return &NullableNotificationsSettingsReplyTo{value: val, isSet: true}
}

func (v NullableNotificationsSettingsReplyTo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationsSettingsReplyTo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


