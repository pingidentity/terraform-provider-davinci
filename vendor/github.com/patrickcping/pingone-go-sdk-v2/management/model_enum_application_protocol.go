/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumApplicationProtocol A string that specifies the protocol for the Application.
type EnumApplicationProtocol string

// List of EnumApplicationProtocol
const (
	ENUMAPPLICATIONPROTOCOL_OPENID_CONNECT EnumApplicationProtocol = "OPENID_CONNECT"
	ENUMAPPLICATIONPROTOCOL_SAML EnumApplicationProtocol = "SAML"
	ENUMAPPLICATIONPROTOCOL_WS_FED EnumApplicationProtocol = "WS-FED"
	ENUMAPPLICATIONPROTOCOL_EXTERNAL_LINK EnumApplicationProtocol = "EXTERNAL_LINK"
)

// All allowed values of EnumApplicationProtocol enum
var AllowedEnumApplicationProtocolEnumValues = []EnumApplicationProtocol{
	"OPENID_CONNECT",
	"SAML",
	"WS-FED",
	"EXTERNAL_LINK",
}

func (v *EnumApplicationProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumApplicationProtocol(value)
	for _, existing := range AllowedEnumApplicationProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumApplicationProtocol", value)
}

// NewEnumApplicationProtocolFromValue returns a pointer to a valid EnumApplicationProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumApplicationProtocolFromValue(v string) (*EnumApplicationProtocol, error) {
	ev := EnumApplicationProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumApplicationProtocol: valid values are %v", v, AllowedEnumApplicationProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumApplicationProtocol) IsValid() bool {
	for _, existing := range AllowedEnumApplicationProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumApplicationProtocol value
func (v EnumApplicationProtocol) Ptr() *EnumApplicationProtocol {
	return &v
}

type NullableEnumApplicationProtocol struct {
	value *EnumApplicationProtocol
	isSet bool
}

func (v NullableEnumApplicationProtocol) Get() *EnumApplicationProtocol {
	return v.value
}

func (v *NullableEnumApplicationProtocol) Set(val *EnumApplicationProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumApplicationProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumApplicationProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumApplicationProtocol(val *EnumApplicationProtocol) *NullableEnumApplicationProtocol {
	return &NullableEnumApplicationProtocol{value: val, isSet: true}
}

func (v NullableEnumApplicationProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumApplicationProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

