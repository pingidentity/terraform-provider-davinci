/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// LicenseUsers struct for LicenseUsers
type LicenseUsers struct {
	// A read-only boolean that specifies whether the license supports sending password management notifications.
	AllowPasswordManagementNotifications *bool `json:"allowPasswordManagementNotifications,omitempty"`
	// A read-only boolean that specifies whether the license supports using external identity providers in the specified environment.
	AllowIdentityProviders *bool `json:"allowIdentityProviders,omitempty"`
	// A read-only boolean that specifies whether the license supports using My Account capabilities in the specified environment.
	AllowMyAccount *bool `json:"allowMyAccount,omitempty"`
	// A read-only boolean that specifies whether the license supports using password management capabilities in the specified environment.
	AllowPasswordManagement *bool `json:"allowPasswordManagement,omitempty"`
	// A read-only boolean that specifies whether the license supports using password only login capabilities in the specified environment.
	AllowPasswordOnlyAuthentication *bool `json:"allowPasswordOnlyAuthentication,omitempty"`
	// A read-only boolean that specifies whether the license supports using password policies in the specified environment.
	AllowPasswordPolicy *bool `json:"allowPasswordPolicy,omitempty"`
	// A read-only boolean that specifies whether the license supports using provisioning capabilities in the specified environment.
	AllowProvisioning *bool `json:"allowProvisioning,omitempty"`
	AllowInboundProvisioning *bool `json:"allowInboundProvisioning,omitempty"`
	// A read-only boolean that specifies whether the license supports role assignments in the specified environment.
	AllowRoleAssignment *bool `json:"allowRoleAssignment,omitempty"`
	// A read-only boolean that specifies whether the license supports using verification flows in the specified environment.
	AllowVerificationFlow *bool `json:"allowVerificationFlow,omitempty"`
	// A read-only boolean that specifies whether the license supports allowing users to update their own profile.
	AllowUpdateSelf *bool `json:"allowUpdateSelf,omitempty"`
	// A read-only boolean that specifies whether the license allows PingOne support.
	EntitledToSupport *bool `json:"entitledToSupport,omitempty"`
	// An read-only integer that specifies the maximum number of users allowed per environment.
	Max *int32 `json:"max,omitempty"`
	HardLimitMax *int32 `json:"hardLimitMax,omitempty"`
	// A read-only integer that specifies a soft limit on the number of active identities across all environments on the license per year. This property is not visible if a value is not provided at the time the license is created.
	AnnualActiveIncluded *int32 `json:"annualActiveIncluded,omitempty"`
	// A read-only integer that specifies a soft limit on the number of active identities across all environments on the license per month. This property is not visible if a value is not provided at the time the license is created.
	MonthlyActiveIncluded *int32 `json:"monthlyActiveIncluded,omitempty"`
}

// NewLicenseUsers instantiates a new LicenseUsers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseUsers() *LicenseUsers {
	this := LicenseUsers{}
	return &this
}

// NewLicenseUsersWithDefaults instantiates a new LicenseUsers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseUsersWithDefaults() *LicenseUsers {
	this := LicenseUsers{}
	return &this
}

// GetAllowPasswordManagementNotifications returns the AllowPasswordManagementNotifications field value if set, zero value otherwise.
func (o *LicenseUsers) GetAllowPasswordManagementNotifications() bool {
	if o == nil || isNil(o.AllowPasswordManagementNotifications) {
		var ret bool
		return ret
	}
	return *o.AllowPasswordManagementNotifications
}

// GetAllowPasswordManagementNotificationsOk returns a tuple with the AllowPasswordManagementNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUsers) GetAllowPasswordManagementNotificationsOk() (*bool, bool) {
	if o == nil || isNil(o.AllowPasswordManagementNotifications) {
    return nil, false
	}
	return o.AllowPasswordManagementNotifications, true
}

// HasAllowPasswordManagementNotifications returns a boolean if a field has been set.
func (o *LicenseUsers) HasAllowPasswordManagementNotifications() bool {
	if o != nil && !isNil(o.AllowPasswordManagementNotifications) {
		return true
	}

	return false
}

// SetAllowPasswordManagementNotifications gets a reference to the given bool and assigns it to the AllowPasswordManagementNotifications field.
func (o *LicenseUsers) SetAllowPasswordManagementNotifications(v bool) {
	o.AllowPasswordManagementNotifications = &v
}

// GetAllowIdentityProviders returns the AllowIdentityProviders field value if set, zero value otherwise.
func (o *LicenseUsers) GetAllowIdentityProviders() bool {
	if o == nil || isNil(o.AllowIdentityProviders) {
		var ret bool
		return ret
	}
	return *o.AllowIdentityProviders
}

// GetAllowIdentityProvidersOk returns a tuple with the AllowIdentityProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUsers) GetAllowIdentityProvidersOk() (*bool, bool) {
	if o == nil || isNil(o.AllowIdentityProviders) {
    return nil, false
	}
	return o.AllowIdentityProviders, true
}

// HasAllowIdentityProviders returns a boolean if a field has been set.
func (o *LicenseUsers) HasAllowIdentityProviders() bool {
	if o != nil && !isNil(o.AllowIdentityProviders) {
		return true
	}

	return false
}

// SetAllowIdentityProviders gets a reference to the given bool and assigns it to the AllowIdentityProviders field.
func (o *LicenseUsers) SetAllowIdentityProviders(v bool) {
	o.AllowIdentityProviders = &v
}

// GetAllowMyAccount returns the AllowMyAccount field value if set, zero value otherwise.
func (o *LicenseUsers) GetAllowMyAccount() bool {
	if o == nil || isNil(o.AllowMyAccount) {
		var ret bool
		return ret
	}
	return *o.AllowMyAccount
}

// GetAllowMyAccountOk returns a tuple with the AllowMyAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUsers) GetAllowMyAccountOk() (*bool, bool) {
	if o == nil || isNil(o.AllowMyAccount) {
    return nil, false
	}
	return o.AllowMyAccount, true
}

// HasAllowMyAccount returns a boolean if a field has been set.
func (o *LicenseUsers) HasAllowMyAccount() bool {
	if o != nil && !isNil(o.AllowMyAccount) {
		return true
	}

	return false
}

// SetAllowMyAccount gets a reference to the given bool and assigns it to the AllowMyAccount field.
func (o *LicenseUsers) SetAllowMyAccount(v bool) {
	o.AllowMyAccount = &v
}

// GetAllowPasswordManagement returns the AllowPasswordManagement field value if set, zero value otherwise.
func (o *LicenseUsers) GetAllowPasswordManagement() bool {
	if o == nil || isNil(o.AllowPasswordManagement) {
		var ret bool
		return ret
	}
	return *o.AllowPasswordManagement
}

// GetAllowPasswordManagementOk returns a tuple with the AllowPasswordManagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUsers) GetAllowPasswordManagementOk() (*bool, bool) {
	if o == nil || isNil(o.AllowPasswordManagement) {
    return nil, false
	}
	return o.AllowPasswordManagement, true
}

// HasAllowPasswordManagement returns a boolean if a field has been set.
func (o *LicenseUsers) HasAllowPasswordManagement() bool {
	if o != nil && !isNil(o.AllowPasswordManagement) {
		return true
	}

	return false
}

// SetAllowPasswordManagement gets a reference to the given bool and assigns it to the AllowPasswordManagement field.
func (o *LicenseUsers) SetAllowPasswordManagement(v bool) {
	o.AllowPasswordManagement = &v
}

// GetAllowPasswordOnlyAuthentication returns the AllowPasswordOnlyAuthentication field value if set, zero value otherwise.
func (o *LicenseUsers) GetAllowPasswordOnlyAuthentication() bool {
	if o == nil || isNil(o.AllowPasswordOnlyAuthentication) {
		var ret bool
		return ret
	}
	return *o.AllowPasswordOnlyAuthentication
}

// GetAllowPasswordOnlyAuthenticationOk returns a tuple with the AllowPasswordOnlyAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUsers) GetAllowPasswordOnlyAuthenticationOk() (*bool, bool) {
	if o == nil || isNil(o.AllowPasswordOnlyAuthentication) {
    return nil, false
	}
	return o.AllowPasswordOnlyAuthentication, true
}

// HasAllowPasswordOnlyAuthentication returns a boolean if a field has been set.
func (o *LicenseUsers) HasAllowPasswordOnlyAuthentication() bool {
	if o != nil && !isNil(o.AllowPasswordOnlyAuthentication) {
		return true
	}

	return false
}

// SetAllowPasswordOnlyAuthentication gets a reference to the given bool and assigns it to the AllowPasswordOnlyAuthentication field.
func (o *LicenseUsers) SetAllowPasswordOnlyAuthentication(v bool) {
	o.AllowPasswordOnlyAuthentication = &v
}

// GetAllowPasswordPolicy returns the AllowPasswordPolicy field value if set, zero value otherwise.
func (o *LicenseUsers) GetAllowPasswordPolicy() bool {
	if o == nil || isNil(o.AllowPasswordPolicy) {
		var ret bool
		return ret
	}
	return *o.AllowPasswordPolicy
}

// GetAllowPasswordPolicyOk returns a tuple with the AllowPasswordPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUsers) GetAllowPasswordPolicyOk() (*bool, bool) {
	if o == nil || isNil(o.AllowPasswordPolicy) {
    return nil, false
	}
	return o.AllowPasswordPolicy, true
}

// HasAllowPasswordPolicy returns a boolean if a field has been set.
func (o *LicenseUsers) HasAllowPasswordPolicy() bool {
	if o != nil && !isNil(o.AllowPasswordPolicy) {
		return true
	}

	return false
}

// SetAllowPasswordPolicy gets a reference to the given bool and assigns it to the AllowPasswordPolicy field.
func (o *LicenseUsers) SetAllowPasswordPolicy(v bool) {
	o.AllowPasswordPolicy = &v
}

// GetAllowProvisioning returns the AllowProvisioning field value if set, zero value otherwise.
func (o *LicenseUsers) GetAllowProvisioning() bool {
	if o == nil || isNil(o.AllowProvisioning) {
		var ret bool
		return ret
	}
	return *o.AllowProvisioning
}

// GetAllowProvisioningOk returns a tuple with the AllowProvisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUsers) GetAllowProvisioningOk() (*bool, bool) {
	if o == nil || isNil(o.AllowProvisioning) {
    return nil, false
	}
	return o.AllowProvisioning, true
}

// HasAllowProvisioning returns a boolean if a field has been set.
func (o *LicenseUsers) HasAllowProvisioning() bool {
	if o != nil && !isNil(o.AllowProvisioning) {
		return true
	}

	return false
}

// SetAllowProvisioning gets a reference to the given bool and assigns it to the AllowProvisioning field.
func (o *LicenseUsers) SetAllowProvisioning(v bool) {
	o.AllowProvisioning = &v
}

// GetAllowInboundProvisioning returns the AllowInboundProvisioning field value if set, zero value otherwise.
func (o *LicenseUsers) GetAllowInboundProvisioning() bool {
	if o == nil || isNil(o.AllowInboundProvisioning) {
		var ret bool
		return ret
	}
	return *o.AllowInboundProvisioning
}

// GetAllowInboundProvisioningOk returns a tuple with the AllowInboundProvisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUsers) GetAllowInboundProvisioningOk() (*bool, bool) {
	if o == nil || isNil(o.AllowInboundProvisioning) {
    return nil, false
	}
	return o.AllowInboundProvisioning, true
}

// HasAllowInboundProvisioning returns a boolean if a field has been set.
func (o *LicenseUsers) HasAllowInboundProvisioning() bool {
	if o != nil && !isNil(o.AllowInboundProvisioning) {
		return true
	}

	return false
}

// SetAllowInboundProvisioning gets a reference to the given bool and assigns it to the AllowInboundProvisioning field.
func (o *LicenseUsers) SetAllowInboundProvisioning(v bool) {
	o.AllowInboundProvisioning = &v
}

// GetAllowRoleAssignment returns the AllowRoleAssignment field value if set, zero value otherwise.
func (o *LicenseUsers) GetAllowRoleAssignment() bool {
	if o == nil || isNil(o.AllowRoleAssignment) {
		var ret bool
		return ret
	}
	return *o.AllowRoleAssignment
}

// GetAllowRoleAssignmentOk returns a tuple with the AllowRoleAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUsers) GetAllowRoleAssignmentOk() (*bool, bool) {
	if o == nil || isNil(o.AllowRoleAssignment) {
    return nil, false
	}
	return o.AllowRoleAssignment, true
}

// HasAllowRoleAssignment returns a boolean if a field has been set.
func (o *LicenseUsers) HasAllowRoleAssignment() bool {
	if o != nil && !isNil(o.AllowRoleAssignment) {
		return true
	}

	return false
}

// SetAllowRoleAssignment gets a reference to the given bool and assigns it to the AllowRoleAssignment field.
func (o *LicenseUsers) SetAllowRoleAssignment(v bool) {
	o.AllowRoleAssignment = &v
}

// GetAllowVerificationFlow returns the AllowVerificationFlow field value if set, zero value otherwise.
func (o *LicenseUsers) GetAllowVerificationFlow() bool {
	if o == nil || isNil(o.AllowVerificationFlow) {
		var ret bool
		return ret
	}
	return *o.AllowVerificationFlow
}

// GetAllowVerificationFlowOk returns a tuple with the AllowVerificationFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUsers) GetAllowVerificationFlowOk() (*bool, bool) {
	if o == nil || isNil(o.AllowVerificationFlow) {
    return nil, false
	}
	return o.AllowVerificationFlow, true
}

// HasAllowVerificationFlow returns a boolean if a field has been set.
func (o *LicenseUsers) HasAllowVerificationFlow() bool {
	if o != nil && !isNil(o.AllowVerificationFlow) {
		return true
	}

	return false
}

// SetAllowVerificationFlow gets a reference to the given bool and assigns it to the AllowVerificationFlow field.
func (o *LicenseUsers) SetAllowVerificationFlow(v bool) {
	o.AllowVerificationFlow = &v
}

// GetAllowUpdateSelf returns the AllowUpdateSelf field value if set, zero value otherwise.
func (o *LicenseUsers) GetAllowUpdateSelf() bool {
	if o == nil || isNil(o.AllowUpdateSelf) {
		var ret bool
		return ret
	}
	return *o.AllowUpdateSelf
}

// GetAllowUpdateSelfOk returns a tuple with the AllowUpdateSelf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUsers) GetAllowUpdateSelfOk() (*bool, bool) {
	if o == nil || isNil(o.AllowUpdateSelf) {
    return nil, false
	}
	return o.AllowUpdateSelf, true
}

// HasAllowUpdateSelf returns a boolean if a field has been set.
func (o *LicenseUsers) HasAllowUpdateSelf() bool {
	if o != nil && !isNil(o.AllowUpdateSelf) {
		return true
	}

	return false
}

// SetAllowUpdateSelf gets a reference to the given bool and assigns it to the AllowUpdateSelf field.
func (o *LicenseUsers) SetAllowUpdateSelf(v bool) {
	o.AllowUpdateSelf = &v
}

// GetEntitledToSupport returns the EntitledToSupport field value if set, zero value otherwise.
func (o *LicenseUsers) GetEntitledToSupport() bool {
	if o == nil || isNil(o.EntitledToSupport) {
		var ret bool
		return ret
	}
	return *o.EntitledToSupport
}

// GetEntitledToSupportOk returns a tuple with the EntitledToSupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUsers) GetEntitledToSupportOk() (*bool, bool) {
	if o == nil || isNil(o.EntitledToSupport) {
    return nil, false
	}
	return o.EntitledToSupport, true
}

// HasEntitledToSupport returns a boolean if a field has been set.
func (o *LicenseUsers) HasEntitledToSupport() bool {
	if o != nil && !isNil(o.EntitledToSupport) {
		return true
	}

	return false
}

// SetEntitledToSupport gets a reference to the given bool and assigns it to the EntitledToSupport field.
func (o *LicenseUsers) SetEntitledToSupport(v bool) {
	o.EntitledToSupport = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *LicenseUsers) GetMax() int32 {
	if o == nil || isNil(o.Max) {
		var ret int32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUsers) GetMaxOk() (*int32, bool) {
	if o == nil || isNil(o.Max) {
    return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *LicenseUsers) HasMax() bool {
	if o != nil && !isNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given int32 and assigns it to the Max field.
func (o *LicenseUsers) SetMax(v int32) {
	o.Max = &v
}

// GetHardLimitMax returns the HardLimitMax field value if set, zero value otherwise.
func (o *LicenseUsers) GetHardLimitMax() int32 {
	if o == nil || isNil(o.HardLimitMax) {
		var ret int32
		return ret
	}
	return *o.HardLimitMax
}

// GetHardLimitMaxOk returns a tuple with the HardLimitMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUsers) GetHardLimitMaxOk() (*int32, bool) {
	if o == nil || isNil(o.HardLimitMax) {
    return nil, false
	}
	return o.HardLimitMax, true
}

// HasHardLimitMax returns a boolean if a field has been set.
func (o *LicenseUsers) HasHardLimitMax() bool {
	if o != nil && !isNil(o.HardLimitMax) {
		return true
	}

	return false
}

// SetHardLimitMax gets a reference to the given int32 and assigns it to the HardLimitMax field.
func (o *LicenseUsers) SetHardLimitMax(v int32) {
	o.HardLimitMax = &v
}

// GetAnnualActiveIncluded returns the AnnualActiveIncluded field value if set, zero value otherwise.
func (o *LicenseUsers) GetAnnualActiveIncluded() int32 {
	if o == nil || isNil(o.AnnualActiveIncluded) {
		var ret int32
		return ret
	}
	return *o.AnnualActiveIncluded
}

// GetAnnualActiveIncludedOk returns a tuple with the AnnualActiveIncluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUsers) GetAnnualActiveIncludedOk() (*int32, bool) {
	if o == nil || isNil(o.AnnualActiveIncluded) {
    return nil, false
	}
	return o.AnnualActiveIncluded, true
}

// HasAnnualActiveIncluded returns a boolean if a field has been set.
func (o *LicenseUsers) HasAnnualActiveIncluded() bool {
	if o != nil && !isNil(o.AnnualActiveIncluded) {
		return true
	}

	return false
}

// SetAnnualActiveIncluded gets a reference to the given int32 and assigns it to the AnnualActiveIncluded field.
func (o *LicenseUsers) SetAnnualActiveIncluded(v int32) {
	o.AnnualActiveIncluded = &v
}

// GetMonthlyActiveIncluded returns the MonthlyActiveIncluded field value if set, zero value otherwise.
func (o *LicenseUsers) GetMonthlyActiveIncluded() int32 {
	if o == nil || isNil(o.MonthlyActiveIncluded) {
		var ret int32
		return ret
	}
	return *o.MonthlyActiveIncluded
}

// GetMonthlyActiveIncludedOk returns a tuple with the MonthlyActiveIncluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUsers) GetMonthlyActiveIncludedOk() (*int32, bool) {
	if o == nil || isNil(o.MonthlyActiveIncluded) {
    return nil, false
	}
	return o.MonthlyActiveIncluded, true
}

// HasMonthlyActiveIncluded returns a boolean if a field has been set.
func (o *LicenseUsers) HasMonthlyActiveIncluded() bool {
	if o != nil && !isNil(o.MonthlyActiveIncluded) {
		return true
	}

	return false
}

// SetMonthlyActiveIncluded gets a reference to the given int32 and assigns it to the MonthlyActiveIncluded field.
func (o *LicenseUsers) SetMonthlyActiveIncluded(v int32) {
	o.MonthlyActiveIncluded = &v
}

func (o LicenseUsers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AllowPasswordManagementNotifications) {
		toSerialize["allowPasswordManagementNotifications"] = o.AllowPasswordManagementNotifications
	}
	if !isNil(o.AllowIdentityProviders) {
		toSerialize["allowIdentityProviders"] = o.AllowIdentityProviders
	}
	if !isNil(o.AllowMyAccount) {
		toSerialize["allowMyAccount"] = o.AllowMyAccount
	}
	if !isNil(o.AllowPasswordManagement) {
		toSerialize["allowPasswordManagement"] = o.AllowPasswordManagement
	}
	if !isNil(o.AllowPasswordOnlyAuthentication) {
		toSerialize["allowPasswordOnlyAuthentication"] = o.AllowPasswordOnlyAuthentication
	}
	if !isNil(o.AllowPasswordPolicy) {
		toSerialize["allowPasswordPolicy"] = o.AllowPasswordPolicy
	}
	if !isNil(o.AllowProvisioning) {
		toSerialize["allowProvisioning"] = o.AllowProvisioning
	}
	if !isNil(o.AllowInboundProvisioning) {
		toSerialize["allowInboundProvisioning"] = o.AllowInboundProvisioning
	}
	if !isNil(o.AllowRoleAssignment) {
		toSerialize["allowRoleAssignment"] = o.AllowRoleAssignment
	}
	if !isNil(o.AllowVerificationFlow) {
		toSerialize["allowVerificationFlow"] = o.AllowVerificationFlow
	}
	if !isNil(o.AllowUpdateSelf) {
		toSerialize["allowUpdateSelf"] = o.AllowUpdateSelf
	}
	if !isNil(o.EntitledToSupport) {
		toSerialize["entitledToSupport"] = o.EntitledToSupport
	}
	if !isNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !isNil(o.HardLimitMax) {
		toSerialize["hardLimitMax"] = o.HardLimitMax
	}
	if !isNil(o.AnnualActiveIncluded) {
		toSerialize["annualActiveIncluded"] = o.AnnualActiveIncluded
	}
	if !isNil(o.MonthlyActiveIncluded) {
		toSerialize["monthlyActiveIncluded"] = o.MonthlyActiveIncluded
	}
	return json.Marshal(toSerialize)
}

type NullableLicenseUsers struct {
	value *LicenseUsers
	isSet bool
}

func (v NullableLicenseUsers) Get() *LicenseUsers {
	return v.value
}

func (v *NullableLicenseUsers) Set(val *LicenseUsers) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseUsers) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseUsers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseUsers(val *LicenseUsers) *NullableLicenseUsers {
	return &NullableLicenseUsers{value: val, isSet: true}
}

func (v NullableLicenseUsers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseUsers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


