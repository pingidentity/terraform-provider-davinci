/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// LicenseFraud struct for LicenseFraud
type LicenseFraud struct {
	AllowBotMaliciousDeviceDetection *bool `json:"allowBotMaliciousDeviceDetection,omitempty"`
	AllowAccountProtection *bool `json:"allowAccountProtection,omitempty"`
}

// NewLicenseFraud instantiates a new LicenseFraud object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseFraud() *LicenseFraud {
	this := LicenseFraud{}
	return &this
}

// NewLicenseFraudWithDefaults instantiates a new LicenseFraud object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseFraudWithDefaults() *LicenseFraud {
	this := LicenseFraud{}
	return &this
}

// GetAllowBotMaliciousDeviceDetection returns the AllowBotMaliciousDeviceDetection field value if set, zero value otherwise.
func (o *LicenseFraud) GetAllowBotMaliciousDeviceDetection() bool {
	if o == nil || isNil(o.AllowBotMaliciousDeviceDetection) {
		var ret bool
		return ret
	}
	return *o.AllowBotMaliciousDeviceDetection
}

// GetAllowBotMaliciousDeviceDetectionOk returns a tuple with the AllowBotMaliciousDeviceDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseFraud) GetAllowBotMaliciousDeviceDetectionOk() (*bool, bool) {
	if o == nil || isNil(o.AllowBotMaliciousDeviceDetection) {
    return nil, false
	}
	return o.AllowBotMaliciousDeviceDetection, true
}

// HasAllowBotMaliciousDeviceDetection returns a boolean if a field has been set.
func (o *LicenseFraud) HasAllowBotMaliciousDeviceDetection() bool {
	if o != nil && !isNil(o.AllowBotMaliciousDeviceDetection) {
		return true
	}

	return false
}

// SetAllowBotMaliciousDeviceDetection gets a reference to the given bool and assigns it to the AllowBotMaliciousDeviceDetection field.
func (o *LicenseFraud) SetAllowBotMaliciousDeviceDetection(v bool) {
	o.AllowBotMaliciousDeviceDetection = &v
}

// GetAllowAccountProtection returns the AllowAccountProtection field value if set, zero value otherwise.
func (o *LicenseFraud) GetAllowAccountProtection() bool {
	if o == nil || isNil(o.AllowAccountProtection) {
		var ret bool
		return ret
	}
	return *o.AllowAccountProtection
}

// GetAllowAccountProtectionOk returns a tuple with the AllowAccountProtection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseFraud) GetAllowAccountProtectionOk() (*bool, bool) {
	if o == nil || isNil(o.AllowAccountProtection) {
    return nil, false
	}
	return o.AllowAccountProtection, true
}

// HasAllowAccountProtection returns a boolean if a field has been set.
func (o *LicenseFraud) HasAllowAccountProtection() bool {
	if o != nil && !isNil(o.AllowAccountProtection) {
		return true
	}

	return false
}

// SetAllowAccountProtection gets a reference to the given bool and assigns it to the AllowAccountProtection field.
func (o *LicenseFraud) SetAllowAccountProtection(v bool) {
	o.AllowAccountProtection = &v
}

func (o LicenseFraud) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AllowBotMaliciousDeviceDetection) {
		toSerialize["allowBotMaliciousDeviceDetection"] = o.AllowBotMaliciousDeviceDetection
	}
	if !isNil(o.AllowAccountProtection) {
		toSerialize["allowAccountProtection"] = o.AllowAccountProtection
	}
	return json.Marshal(toSerialize)
}

type NullableLicenseFraud struct {
	value *LicenseFraud
	isSet bool
}

func (v NullableLicenseFraud) Get() *LicenseFraud {
	return v.value
}

func (v *NullableLicenseFraud) Set(val *LicenseFraud) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseFraud) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseFraud) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseFraud(val *LicenseFraud) *NullableLicenseFraud {
	return &NullableLicenseFraud{value: val, isSet: true}
}

func (v NullableLicenseFraud) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseFraud) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


