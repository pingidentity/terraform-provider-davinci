/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// ApplicationPingOnePortalAllOf struct for ApplicationPingOnePortalAllOf
type ApplicationPingOnePortalAllOf struct {
	// If `true`, applies the default theme to the app portal application.
	ApplyDefaultTheme bool `json:"applyDefaultTheme"`
}

// NewApplicationPingOnePortalAllOf instantiates a new ApplicationPingOnePortalAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationPingOnePortalAllOf(applyDefaultTheme bool) *ApplicationPingOnePortalAllOf {
	this := ApplicationPingOnePortalAllOf{}
	this.ApplyDefaultTheme = applyDefaultTheme
	return &this
}

// NewApplicationPingOnePortalAllOfWithDefaults instantiates a new ApplicationPingOnePortalAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationPingOnePortalAllOfWithDefaults() *ApplicationPingOnePortalAllOf {
	this := ApplicationPingOnePortalAllOf{}
	return &this
}

// GetApplyDefaultTheme returns the ApplyDefaultTheme field value
func (o *ApplicationPingOnePortalAllOf) GetApplyDefaultTheme() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ApplyDefaultTheme
}

// GetApplyDefaultThemeOk returns a tuple with the ApplyDefaultTheme field value
// and a boolean to check if the value has been set.
func (o *ApplicationPingOnePortalAllOf) GetApplyDefaultThemeOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ApplyDefaultTheme, true
}

// SetApplyDefaultTheme sets field value
func (o *ApplicationPingOnePortalAllOf) SetApplyDefaultTheme(v bool) {
	o.ApplyDefaultTheme = v
}

func (o ApplicationPingOnePortalAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["applyDefaultTheme"] = o.ApplyDefaultTheme
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationPingOnePortalAllOf struct {
	value *ApplicationPingOnePortalAllOf
	isSet bool
}

func (v NullableApplicationPingOnePortalAllOf) Get() *ApplicationPingOnePortalAllOf {
	return v.value
}

func (v *NullableApplicationPingOnePortalAllOf) Set(val *ApplicationPingOnePortalAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationPingOnePortalAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationPingOnePortalAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationPingOnePortalAllOf(val *ApplicationPingOnePortalAllOf) *NullableApplicationPingOnePortalAllOf {
	return &NullableApplicationPingOnePortalAllOf{value: val, isSet: true}
}

func (v NullableApplicationPingOnePortalAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationPingOnePortalAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


