/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumNotificationsPolicyQuotaItemType Specifies whether the limit defined is per-user or per environment. Value must be either `USER` or `ENVIRONMENT`.
type EnumNotificationsPolicyQuotaItemType string

// List of EnumNotificationsPolicyQuotaItemType
const (
	ENUMNOTIFICATIONSPOLICYQUOTAITEMTYPE_USER EnumNotificationsPolicyQuotaItemType = "USER"
	ENUMNOTIFICATIONSPOLICYQUOTAITEMTYPE_ENVIRONMENT EnumNotificationsPolicyQuotaItemType = "ENVIRONMENT"
)

// All allowed values of EnumNotificationsPolicyQuotaItemType enum
var AllowedEnumNotificationsPolicyQuotaItemTypeEnumValues = []EnumNotificationsPolicyQuotaItemType{
	"USER",
	"ENVIRONMENT",
}

func (v *EnumNotificationsPolicyQuotaItemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumNotificationsPolicyQuotaItemType(value)
	for _, existing := range AllowedEnumNotificationsPolicyQuotaItemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumNotificationsPolicyQuotaItemType", value)
}

// NewEnumNotificationsPolicyQuotaItemTypeFromValue returns a pointer to a valid EnumNotificationsPolicyQuotaItemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumNotificationsPolicyQuotaItemTypeFromValue(v string) (*EnumNotificationsPolicyQuotaItemType, error) {
	ev := EnumNotificationsPolicyQuotaItemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumNotificationsPolicyQuotaItemType: valid values are %v", v, AllowedEnumNotificationsPolicyQuotaItemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumNotificationsPolicyQuotaItemType) IsValid() bool {
	for _, existing := range AllowedEnumNotificationsPolicyQuotaItemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumNotificationsPolicyQuotaItemType value
func (v EnumNotificationsPolicyQuotaItemType) Ptr() *EnumNotificationsPolicyQuotaItemType {
	return &v
}

type NullableEnumNotificationsPolicyQuotaItemType struct {
	value *EnumNotificationsPolicyQuotaItemType
	isSet bool
}

func (v NullableEnumNotificationsPolicyQuotaItemType) Get() *EnumNotificationsPolicyQuotaItemType {
	return v.value
}

func (v *NullableEnumNotificationsPolicyQuotaItemType) Set(val *EnumNotificationsPolicyQuotaItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumNotificationsPolicyQuotaItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumNotificationsPolicyQuotaItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumNotificationsPolicyQuotaItemType(val *EnumNotificationsPolicyQuotaItemType) *NullableEnumNotificationsPolicyQuotaItemType {
	return &NullableEnumNotificationsPolicyQuotaItemType{value: val, isSet: true}
}

func (v NullableEnumNotificationsPolicyQuotaItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumNotificationsPolicyQuotaItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

