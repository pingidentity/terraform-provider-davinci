/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// UserAccount struct for UserAccount
type UserAccount struct {
	// A boolean that specifies the whether the user can authenticate. If the value is set to false, the account is locked or the user is disabled, and unless specified otherwise in administrative configuration, the user will be unable to authenticate.
	CanAuthenticate *bool `json:"canAuthenticate,omitempty"`
	// The time the specified user account was locked. This property might be absent if the account is unlocked or if the account was locked out automatically by failed password attempts.
	LockedAt *string `json:"lockedAt,omitempty"`
	// An integer that specifies the number of seconds until the user's account is unlocked. This property is absent if the account is unlocked, or if it will not automatically unlock (and must be unlocked by an administrator).
	SecondsUntilUnlock *int32 `json:"secondsUntilUnlock,omitempty"`
	Status *EnumUserStatus `json:"status,omitempty"`
	// The time the specified user account will be unlocked. This property is absent if the account is unlocked, or if it will not automatically unlock (and must be unlocked by an administrator).
	UnlockAt *string `json:"unlockAt,omitempty"`
}

// NewUserAccount instantiates a new UserAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAccount() *UserAccount {
	this := UserAccount{}
	return &this
}

// NewUserAccountWithDefaults instantiates a new UserAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAccountWithDefaults() *UserAccount {
	this := UserAccount{}
	return &this
}

// GetCanAuthenticate returns the CanAuthenticate field value if set, zero value otherwise.
func (o *UserAccount) GetCanAuthenticate() bool {
	if o == nil || isNil(o.CanAuthenticate) {
		var ret bool
		return ret
	}
	return *o.CanAuthenticate
}

// GetCanAuthenticateOk returns a tuple with the CanAuthenticate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetCanAuthenticateOk() (*bool, bool) {
	if o == nil || isNil(o.CanAuthenticate) {
    return nil, false
	}
	return o.CanAuthenticate, true
}

// HasCanAuthenticate returns a boolean if a field has been set.
func (o *UserAccount) HasCanAuthenticate() bool {
	if o != nil && !isNil(o.CanAuthenticate) {
		return true
	}

	return false
}

// SetCanAuthenticate gets a reference to the given bool and assigns it to the CanAuthenticate field.
func (o *UserAccount) SetCanAuthenticate(v bool) {
	o.CanAuthenticate = &v
}

// GetLockedAt returns the LockedAt field value if set, zero value otherwise.
func (o *UserAccount) GetLockedAt() string {
	if o == nil || isNil(o.LockedAt) {
		var ret string
		return ret
	}
	return *o.LockedAt
}

// GetLockedAtOk returns a tuple with the LockedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetLockedAtOk() (*string, bool) {
	if o == nil || isNil(o.LockedAt) {
    return nil, false
	}
	return o.LockedAt, true
}

// HasLockedAt returns a boolean if a field has been set.
func (o *UserAccount) HasLockedAt() bool {
	if o != nil && !isNil(o.LockedAt) {
		return true
	}

	return false
}

// SetLockedAt gets a reference to the given string and assigns it to the LockedAt field.
func (o *UserAccount) SetLockedAt(v string) {
	o.LockedAt = &v
}

// GetSecondsUntilUnlock returns the SecondsUntilUnlock field value if set, zero value otherwise.
func (o *UserAccount) GetSecondsUntilUnlock() int32 {
	if o == nil || isNil(o.SecondsUntilUnlock) {
		var ret int32
		return ret
	}
	return *o.SecondsUntilUnlock
}

// GetSecondsUntilUnlockOk returns a tuple with the SecondsUntilUnlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetSecondsUntilUnlockOk() (*int32, bool) {
	if o == nil || isNil(o.SecondsUntilUnlock) {
    return nil, false
	}
	return o.SecondsUntilUnlock, true
}

// HasSecondsUntilUnlock returns a boolean if a field has been set.
func (o *UserAccount) HasSecondsUntilUnlock() bool {
	if o != nil && !isNil(o.SecondsUntilUnlock) {
		return true
	}

	return false
}

// SetSecondsUntilUnlock gets a reference to the given int32 and assigns it to the SecondsUntilUnlock field.
func (o *UserAccount) SetSecondsUntilUnlock(v int32) {
	o.SecondsUntilUnlock = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UserAccount) GetStatus() EnumUserStatus {
	if o == nil || isNil(o.Status) {
		var ret EnumUserStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetStatusOk() (*EnumUserStatus, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UserAccount) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given EnumUserStatus and assigns it to the Status field.
func (o *UserAccount) SetStatus(v EnumUserStatus) {
	o.Status = &v
}

// GetUnlockAt returns the UnlockAt field value if set, zero value otherwise.
func (o *UserAccount) GetUnlockAt() string {
	if o == nil || isNil(o.UnlockAt) {
		var ret string
		return ret
	}
	return *o.UnlockAt
}

// GetUnlockAtOk returns a tuple with the UnlockAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetUnlockAtOk() (*string, bool) {
	if o == nil || isNil(o.UnlockAt) {
    return nil, false
	}
	return o.UnlockAt, true
}

// HasUnlockAt returns a boolean if a field has been set.
func (o *UserAccount) HasUnlockAt() bool {
	if o != nil && !isNil(o.UnlockAt) {
		return true
	}

	return false
}

// SetUnlockAt gets a reference to the given string and assigns it to the UnlockAt field.
func (o *UserAccount) SetUnlockAt(v string) {
	o.UnlockAt = &v
}

func (o UserAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CanAuthenticate) {
		toSerialize["canAuthenticate"] = o.CanAuthenticate
	}
	if !isNil(o.LockedAt) {
		toSerialize["lockedAt"] = o.LockedAt
	}
	if !isNil(o.SecondsUntilUnlock) {
		toSerialize["secondsUntilUnlock"] = o.SecondsUntilUnlock
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.UnlockAt) {
		toSerialize["unlockAt"] = o.UnlockAt
	}
	return json.Marshal(toSerialize)
}

type NullableUserAccount struct {
	value *UserAccount
	isSet bool
}

func (v NullableUserAccount) Get() *UserAccount {
	return v.value
}

func (v *NullableUserAccount) Set(val *UserAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAccount(val *UserAccount) *NullableUserAccount {
	return &NullableUserAccount{value: val, isSet: true}
}

func (v NullableUserAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


