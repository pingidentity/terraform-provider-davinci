/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// SignOnPolicyActionCommonConditionAnd struct for SignOnPolicyActionCommonConditionAnd
type SignOnPolicyActionCommonConditionAnd struct {
	And []SignOnPolicyActionCommonConditionOrOrInner `json:"and,omitempty"`
}

// NewSignOnPolicyActionCommonConditionAnd instantiates a new SignOnPolicyActionCommonConditionAnd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignOnPolicyActionCommonConditionAnd() *SignOnPolicyActionCommonConditionAnd {
	this := SignOnPolicyActionCommonConditionAnd{}
	return &this
}

// NewSignOnPolicyActionCommonConditionAndWithDefaults instantiates a new SignOnPolicyActionCommonConditionAnd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignOnPolicyActionCommonConditionAndWithDefaults() *SignOnPolicyActionCommonConditionAnd {
	this := SignOnPolicyActionCommonConditionAnd{}
	return &this
}

// GetAnd returns the And field value if set, zero value otherwise.
func (o *SignOnPolicyActionCommonConditionAnd) GetAnd() []SignOnPolicyActionCommonConditionOrOrInner {
	if o == nil || isNil(o.And) {
		var ret []SignOnPolicyActionCommonConditionOrOrInner
		return ret
	}
	return o.And
}

// GetAndOk returns a tuple with the And field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignOnPolicyActionCommonConditionAnd) GetAndOk() ([]SignOnPolicyActionCommonConditionOrOrInner, bool) {
	if o == nil || isNil(o.And) {
    return nil, false
	}
	return o.And, true
}

// HasAnd returns a boolean if a field has been set.
func (o *SignOnPolicyActionCommonConditionAnd) HasAnd() bool {
	if o != nil && !isNil(o.And) {
		return true
	}

	return false
}

// SetAnd gets a reference to the given []SignOnPolicyActionCommonConditionOrOrInner and assigns it to the And field.
func (o *SignOnPolicyActionCommonConditionAnd) SetAnd(v []SignOnPolicyActionCommonConditionOrOrInner) {
	o.And = v
}

func (o SignOnPolicyActionCommonConditionAnd) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.And) {
		toSerialize["and"] = o.And
	}
	return json.Marshal(toSerialize)
}

type NullableSignOnPolicyActionCommonConditionAnd struct {
	value *SignOnPolicyActionCommonConditionAnd
	isSet bool
}

func (v NullableSignOnPolicyActionCommonConditionAnd) Get() *SignOnPolicyActionCommonConditionAnd {
	return v.value
}

func (v *NullableSignOnPolicyActionCommonConditionAnd) Set(val *SignOnPolicyActionCommonConditionAnd) {
	v.value = val
	v.isSet = true
}

func (v NullableSignOnPolicyActionCommonConditionAnd) IsSet() bool {
	return v.isSet
}

func (v *NullableSignOnPolicyActionCommonConditionAnd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignOnPolicyActionCommonConditionAnd(val *SignOnPolicyActionCommonConditionAnd) *NullableSignOnPolicyActionCommonConditionAnd {
	return &NullableSignOnPolicyActionCommonConditionAnd{value: val, isSet: true}
}

func (v NullableSignOnPolicyActionCommonConditionAnd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignOnPolicyActionCommonConditionAnd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


