/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumTemplateContentPushCategory For Push content, you can specify what type of banner should be displayed to the user. The available options are: * `BANNER_BUTTONS` - the banner contains both Approve and Deny buttons * `WITHOUT_BANNER_BUTTONS` - when the user clicks the banner, they are taken to an application that contains the necessary approval controls. * `APPROVE_AND_OPEN_APP` - when the Approve button is clicked, authentication is completed and the user is taken to the relevant application.  If this parameter is not provided, the default is `BANNER_BUTTONS`. Note that to use the non-default push banners, you must implement them in your application code, using the PingOne SDK. For details, see the [README for iOS](https://github.com/pingidentity/pingone-mobile-sdk-ios/#171-push-notifications-categories) and the [README for Android](https://github.com/pingidentity/pingone-mobile-sdk-android). 
type EnumTemplateContentPushCategory string

// List of EnumTemplateContentPushCategory
const (
	ENUMTEMPLATECONTENTPUSHCATEGORY_BANNER_BUTTONS EnumTemplateContentPushCategory = "BANNER_BUTTONS"
	ENUMTEMPLATECONTENTPUSHCATEGORY_WITHOUT_BANNER_BUTTONS EnumTemplateContentPushCategory = "WITHOUT_BANNER_BUTTONS"
	ENUMTEMPLATECONTENTPUSHCATEGORY_APPROVE_AND_OPEN_APP EnumTemplateContentPushCategory = "APPROVE_AND_OPEN_APP"
)

// All allowed values of EnumTemplateContentPushCategory enum
var AllowedEnumTemplateContentPushCategoryEnumValues = []EnumTemplateContentPushCategory{
	"BANNER_BUTTONS",
	"WITHOUT_BANNER_BUTTONS",
	"APPROVE_AND_OPEN_APP",
}

func (v *EnumTemplateContentPushCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumTemplateContentPushCategory(value)
	for _, existing := range AllowedEnumTemplateContentPushCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumTemplateContentPushCategory", value)
}

// NewEnumTemplateContentPushCategoryFromValue returns a pointer to a valid EnumTemplateContentPushCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumTemplateContentPushCategoryFromValue(v string) (*EnumTemplateContentPushCategory, error) {
	ev := EnumTemplateContentPushCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumTemplateContentPushCategory: valid values are %v", v, AllowedEnumTemplateContentPushCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumTemplateContentPushCategory) IsValid() bool {
	for _, existing := range AllowedEnumTemplateContentPushCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumTemplateContentPushCategory value
func (v EnumTemplateContentPushCategory) Ptr() *EnumTemplateContentPushCategory {
	return &v
}

type NullableEnumTemplateContentPushCategory struct {
	value *EnumTemplateContentPushCategory
	isSet bool
}

func (v NullableEnumTemplateContentPushCategory) Get() *EnumTemplateContentPushCategory {
	return v.value
}

func (v *NullableEnumTemplateContentPushCategory) Set(val *EnumTemplateContentPushCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumTemplateContentPushCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumTemplateContentPushCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumTemplateContentPushCategory(val *EnumTemplateContentPushCategory) *NullableEnumTemplateContentPushCategory {
	return &NullableEnumTemplateContentPushCategory{value: val, isSet: true}
}

func (v NullableEnumTemplateContentPushCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumTemplateContentPushCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

