/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// SubscriptionFilterOptions struct for SubscriptionFilterOptions
type SubscriptionFilterOptions struct {
	// A non-empty array that specifies the list of action types that should be matched for the subscription. This is a required property.
	IncludedActionTypes []string `json:"includedActionTypes"`
	// An array that specifies the list of applications (by ID) whose events are monitored by the subscription (maximum of 10 IDs in the array). This is an optional property. If a list of applications is not provided, events are monitored for all applications in the environment.
	IncludedApplications []SubscriptionFilterOptionsIncludedApplicationsInner `json:"includedApplications,omitempty"`
	// An array that specifies the list of populations (by ID) whose events are monitored by the subscription (maximum of 10 IDs in the array). This property matches events for users in the specified populations, as opposed to events generated in which the user in one of the populations is the actor. This is an optional property.
	IncludedPopulations []SubscriptionFilterOptionsIncludedApplicationsInner `json:"includedPopulations,omitempty"`
	// An array of tags that events must have to be monitored by the subscription. If tags are not specified, all events are monitored. Currently, the available tags are `adminIdentityEvent`. Identifies the event as the action of an administrator on other administrators.
	IncludedTags []EnumSubscriptionFilterIncludedTags `json:"includedTags,omitempty"`
}

// NewSubscriptionFilterOptions instantiates a new SubscriptionFilterOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionFilterOptions(includedActionTypes []string) *SubscriptionFilterOptions {
	this := SubscriptionFilterOptions{}
	this.IncludedActionTypes = includedActionTypes
	return &this
}

// NewSubscriptionFilterOptionsWithDefaults instantiates a new SubscriptionFilterOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionFilterOptionsWithDefaults() *SubscriptionFilterOptions {
	this := SubscriptionFilterOptions{}
	return &this
}

// GetIncludedActionTypes returns the IncludedActionTypes field value
func (o *SubscriptionFilterOptions) GetIncludedActionTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IncludedActionTypes
}

// GetIncludedActionTypesOk returns a tuple with the IncludedActionTypes field value
// and a boolean to check if the value has been set.
func (o *SubscriptionFilterOptions) GetIncludedActionTypesOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.IncludedActionTypes, true
}

// SetIncludedActionTypes sets field value
func (o *SubscriptionFilterOptions) SetIncludedActionTypes(v []string) {
	o.IncludedActionTypes = v
}

// GetIncludedApplications returns the IncludedApplications field value if set, zero value otherwise.
func (o *SubscriptionFilterOptions) GetIncludedApplications() []SubscriptionFilterOptionsIncludedApplicationsInner {
	if o == nil || isNil(o.IncludedApplications) {
		var ret []SubscriptionFilterOptionsIncludedApplicationsInner
		return ret
	}
	return o.IncludedApplications
}

// GetIncludedApplicationsOk returns a tuple with the IncludedApplications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionFilterOptions) GetIncludedApplicationsOk() ([]SubscriptionFilterOptionsIncludedApplicationsInner, bool) {
	if o == nil || isNil(o.IncludedApplications) {
    return nil, false
	}
	return o.IncludedApplications, true
}

// HasIncludedApplications returns a boolean if a field has been set.
func (o *SubscriptionFilterOptions) HasIncludedApplications() bool {
	if o != nil && !isNil(o.IncludedApplications) {
		return true
	}

	return false
}

// SetIncludedApplications gets a reference to the given []SubscriptionFilterOptionsIncludedApplicationsInner and assigns it to the IncludedApplications field.
func (o *SubscriptionFilterOptions) SetIncludedApplications(v []SubscriptionFilterOptionsIncludedApplicationsInner) {
	o.IncludedApplications = v
}

// GetIncludedPopulations returns the IncludedPopulations field value if set, zero value otherwise.
func (o *SubscriptionFilterOptions) GetIncludedPopulations() []SubscriptionFilterOptionsIncludedApplicationsInner {
	if o == nil || isNil(o.IncludedPopulations) {
		var ret []SubscriptionFilterOptionsIncludedApplicationsInner
		return ret
	}
	return o.IncludedPopulations
}

// GetIncludedPopulationsOk returns a tuple with the IncludedPopulations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionFilterOptions) GetIncludedPopulationsOk() ([]SubscriptionFilterOptionsIncludedApplicationsInner, bool) {
	if o == nil || isNil(o.IncludedPopulations) {
    return nil, false
	}
	return o.IncludedPopulations, true
}

// HasIncludedPopulations returns a boolean if a field has been set.
func (o *SubscriptionFilterOptions) HasIncludedPopulations() bool {
	if o != nil && !isNil(o.IncludedPopulations) {
		return true
	}

	return false
}

// SetIncludedPopulations gets a reference to the given []SubscriptionFilterOptionsIncludedApplicationsInner and assigns it to the IncludedPopulations field.
func (o *SubscriptionFilterOptions) SetIncludedPopulations(v []SubscriptionFilterOptionsIncludedApplicationsInner) {
	o.IncludedPopulations = v
}

// GetIncludedTags returns the IncludedTags field value if set, zero value otherwise.
func (o *SubscriptionFilterOptions) GetIncludedTags() []EnumSubscriptionFilterIncludedTags {
	if o == nil || isNil(o.IncludedTags) {
		var ret []EnumSubscriptionFilterIncludedTags
		return ret
	}
	return o.IncludedTags
}

// GetIncludedTagsOk returns a tuple with the IncludedTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionFilterOptions) GetIncludedTagsOk() ([]EnumSubscriptionFilterIncludedTags, bool) {
	if o == nil || isNil(o.IncludedTags) {
    return nil, false
	}
	return o.IncludedTags, true
}

// HasIncludedTags returns a boolean if a field has been set.
func (o *SubscriptionFilterOptions) HasIncludedTags() bool {
	if o != nil && !isNil(o.IncludedTags) {
		return true
	}

	return false
}

// SetIncludedTags gets a reference to the given []EnumSubscriptionFilterIncludedTags and assigns it to the IncludedTags field.
func (o *SubscriptionFilterOptions) SetIncludedTags(v []EnumSubscriptionFilterIncludedTags) {
	o.IncludedTags = v
}

func (o SubscriptionFilterOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["includedActionTypes"] = o.IncludedActionTypes
	}
	if !isNil(o.IncludedApplications) {
		toSerialize["includedApplications"] = o.IncludedApplications
	}
	if !isNil(o.IncludedPopulations) {
		toSerialize["includedPopulations"] = o.IncludedPopulations
	}
	if !isNil(o.IncludedTags) {
		toSerialize["includedTags"] = o.IncludedTags
	}
	return json.Marshal(toSerialize)
}

type NullableSubscriptionFilterOptions struct {
	value *SubscriptionFilterOptions
	isSet bool
}

func (v NullableSubscriptionFilterOptions) Get() *SubscriptionFilterOptions {
	return v.value
}

func (v *NullableSubscriptionFilterOptions) Set(val *SubscriptionFilterOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionFilterOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionFilterOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionFilterOptions(val *SubscriptionFilterOptions) *NullableSubscriptionFilterOptions {
	return &NullableSubscriptionFilterOptions{value: val, isSet: true}
}

func (v NullableSubscriptionFilterOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionFilterOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


