/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// TemplateContentSMS struct for TemplateContentSMS
type TemplateContentSMS struct {
	// The template id.
	Id *string `json:"id,omitempty"`
	// The time the resource was created.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The time the resource was last updated.
	UpdatedAt *string `json:"updatedAt,omitempty"`
	// Specifies whether the template is a predefined default template.
	Default *bool `json:"default,omitempty"`
	// A valid case-insensitive locale, complying with the ISO-639 language code and ISO-3166 country code standards: Two-character language code, for example, \"en\". Two-character language code followed by a two-character country code, separated by an underscore or dash, for example: \"en_GB\", \"en-GB\". Cannot be changed after it is initially set in `POST /environments/{{envID}}/templates/{{templateName}}/contents`. 
	Locale string `json:"locale"`
	DeliveryMethod EnumTemplateContentDeliveryMethod `json:"deliveryMethod"`
	// Holds the unique user-defined name for each content variant that uses the same template + `deliveryMethod` + `locale` combination. This property is case insensitive and has a limit of 100 characters. For more information, see [Creating custom contents](https://apidocs.pingidentity.com/pingone/platform/v1/api/#notifications-templates-creating-custom-contents).
	Variant *string `json:"variant,omitempty"`
	// The SMS text. UC-2 encoding is used for text that contains non GSM-7 characters. UC-2 encoded text cannot exceed 67 characters. GSM-7 encoded text cannot exceed 153 characters. If supported, it can include variables. 
	Content string `json:"content"`
	// The SMS sender ID. This property can contain only alphanumeric characters and spaces, and its length cannot exceed 11 characters. In some countries, it is impossible to send an SMS with an alphanumeric sender ID. For those countries, the sender ID must be empty. For SMS recipients in specific countries, refer to Twilio's documentation on [International support for Alphanumeric Sender ID](https://support.twilio.com/hc/en-us/articles/223133767-International-support-for-Alphanumeric-Sender-ID).
	Sender *string `json:"sender,omitempty"`
}

// NewTemplateContentSMS instantiates a new TemplateContentSMS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateContentSMS(locale string, deliveryMethod EnumTemplateContentDeliveryMethod, content string) *TemplateContentSMS {
	this := TemplateContentSMS{}
	this.Locale = locale
	this.DeliveryMethod = deliveryMethod
	this.Content = content
	return &this
}

// NewTemplateContentSMSWithDefaults instantiates a new TemplateContentSMS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateContentSMSWithDefaults() *TemplateContentSMS {
	this := TemplateContentSMS{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TemplateContentSMS) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateContentSMS) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TemplateContentSMS) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TemplateContentSMS) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TemplateContentSMS) GetCreatedAt() string {
	if o == nil || isNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateContentSMS) GetCreatedAtOk() (*string, bool) {
	if o == nil || isNil(o.CreatedAt) {
    return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TemplateContentSMS) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *TemplateContentSMS) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TemplateContentSMS) GetUpdatedAt() string {
	if o == nil || isNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateContentSMS) GetUpdatedAtOk() (*string, bool) {
	if o == nil || isNil(o.UpdatedAt) {
    return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TemplateContentSMS) HasUpdatedAt() bool {
	if o != nil && !isNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *TemplateContentSMS) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *TemplateContentSMS) GetDefault() bool {
	if o == nil || isNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateContentSMS) GetDefaultOk() (*bool, bool) {
	if o == nil || isNil(o.Default) {
    return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *TemplateContentSMS) HasDefault() bool {
	if o != nil && !isNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *TemplateContentSMS) SetDefault(v bool) {
	o.Default = &v
}

// GetLocale returns the Locale field value
func (o *TemplateContentSMS) GetLocale() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value
// and a boolean to check if the value has been set.
func (o *TemplateContentSMS) GetLocaleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Locale, true
}

// SetLocale sets field value
func (o *TemplateContentSMS) SetLocale(v string) {
	o.Locale = v
}

// GetDeliveryMethod returns the DeliveryMethod field value
func (o *TemplateContentSMS) GetDeliveryMethod() EnumTemplateContentDeliveryMethod {
	if o == nil {
		var ret EnumTemplateContentDeliveryMethod
		return ret
	}

	return o.DeliveryMethod
}

// GetDeliveryMethodOk returns a tuple with the DeliveryMethod field value
// and a boolean to check if the value has been set.
func (o *TemplateContentSMS) GetDeliveryMethodOk() (*EnumTemplateContentDeliveryMethod, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DeliveryMethod, true
}

// SetDeliveryMethod sets field value
func (o *TemplateContentSMS) SetDeliveryMethod(v EnumTemplateContentDeliveryMethod) {
	o.DeliveryMethod = v
}

// GetVariant returns the Variant field value if set, zero value otherwise.
func (o *TemplateContentSMS) GetVariant() string {
	if o == nil || isNil(o.Variant) {
		var ret string
		return ret
	}
	return *o.Variant
}

// GetVariantOk returns a tuple with the Variant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateContentSMS) GetVariantOk() (*string, bool) {
	if o == nil || isNil(o.Variant) {
    return nil, false
	}
	return o.Variant, true
}

// HasVariant returns a boolean if a field has been set.
func (o *TemplateContentSMS) HasVariant() bool {
	if o != nil && !isNil(o.Variant) {
		return true
	}

	return false
}

// SetVariant gets a reference to the given string and assigns it to the Variant field.
func (o *TemplateContentSMS) SetVariant(v string) {
	o.Variant = &v
}

// GetContent returns the Content field value
func (o *TemplateContentSMS) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *TemplateContentSMS) GetContentOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *TemplateContentSMS) SetContent(v string) {
	o.Content = v
}

// GetSender returns the Sender field value if set, zero value otherwise.
func (o *TemplateContentSMS) GetSender() string {
	if o == nil || isNil(o.Sender) {
		var ret string
		return ret
	}
	return *o.Sender
}

// GetSenderOk returns a tuple with the Sender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateContentSMS) GetSenderOk() (*string, bool) {
	if o == nil || isNil(o.Sender) {
    return nil, false
	}
	return o.Sender, true
}

// HasSender returns a boolean if a field has been set.
func (o *TemplateContentSMS) HasSender() bool {
	if o != nil && !isNil(o.Sender) {
		return true
	}

	return false
}

// SetSender gets a reference to the given string and assigns it to the Sender field.
func (o *TemplateContentSMS) SetSender(v string) {
	o.Sender = &v
}

func (o TemplateContentSMS) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !isNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if true {
		toSerialize["locale"] = o.Locale
	}
	if true {
		toSerialize["deliveryMethod"] = o.DeliveryMethod
	}
	if !isNil(o.Variant) {
		toSerialize["variant"] = o.Variant
	}
	if true {
		toSerialize["content"] = o.Content
	}
	if !isNil(o.Sender) {
		toSerialize["sender"] = o.Sender
	}
	return json.Marshal(toSerialize)
}

type NullableTemplateContentSMS struct {
	value *TemplateContentSMS
	isSet bool
}

func (v NullableTemplateContentSMS) Get() *TemplateContentSMS {
	return v.value
}

func (v *NullableTemplateContentSMS) Set(val *TemplateContentSMS) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateContentSMS) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateContentSMS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateContentSMS(val *TemplateContentSMS) *NullableTemplateContentSMS {
	return &NullableTemplateContentSMS{value: val, isSet: true}
}

func (v NullableTemplateContentSMS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateContentSMS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


