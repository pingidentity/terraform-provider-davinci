/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2022-08-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// IdentityProviderCommonLoginButtonIcon struct for IdentityProviderCommonLoginButtonIcon
type IdentityProviderCommonLoginButtonIcon struct {
	// The image ID for the IdP login button icon. For Facebook, Google, and LinkedIn IdPs, updates to the login button are ignored to preserve the IdP branding rules.
	Id *string `json:"id,omitempty"`
	// The HREF for the IdP login button icon image file. For Facebook, Google, and LinkedIn IdPs, updates to the login button are ignored to preserve the IdP branding rules.
	Href *string `json:"href,omitempty"`
}

// NewIdentityProviderCommonLoginButtonIcon instantiates a new IdentityProviderCommonLoginButtonIcon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityProviderCommonLoginButtonIcon() *IdentityProviderCommonLoginButtonIcon {
	this := IdentityProviderCommonLoginButtonIcon{}
	return &this
}

// NewIdentityProviderCommonLoginButtonIconWithDefaults instantiates a new IdentityProviderCommonLoginButtonIcon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityProviderCommonLoginButtonIconWithDefaults() *IdentityProviderCommonLoginButtonIcon {
	this := IdentityProviderCommonLoginButtonIcon{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IdentityProviderCommonLoginButtonIcon) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderCommonLoginButtonIcon) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IdentityProviderCommonLoginButtonIcon) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IdentityProviderCommonLoginButtonIcon) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *IdentityProviderCommonLoginButtonIcon) GetHref() string {
	if o == nil || isNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderCommonLoginButtonIcon) GetHrefOk() (*string, bool) {
	if o == nil || isNil(o.Href) {
    return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *IdentityProviderCommonLoginButtonIcon) HasHref() bool {
	if o != nil && !isNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *IdentityProviderCommonLoginButtonIcon) SetHref(v string) {
	o.Href = &v
}

func (o IdentityProviderCommonLoginButtonIcon) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	return json.Marshal(toSerialize)
}

type NullableIdentityProviderCommonLoginButtonIcon struct {
	value *IdentityProviderCommonLoginButtonIcon
	isSet bool
}

func (v NullableIdentityProviderCommonLoginButtonIcon) Get() *IdentityProviderCommonLoginButtonIcon {
	return v.value
}

func (v *NullableIdentityProviderCommonLoginButtonIcon) Set(val *IdentityProviderCommonLoginButtonIcon) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityProviderCommonLoginButtonIcon) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityProviderCommonLoginButtonIcon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityProviderCommonLoginButtonIcon(val *IdentityProviderCommonLoginButtonIcon) *NullableIdentityProviderCommonLoginButtonIcon {
	return &NullableIdentityProviderCommonLoginButtonIcon{value: val, isSet: true}
}

func (v NullableIdentityProviderCommonLoginButtonIcon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityProviderCommonLoginButtonIcon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


